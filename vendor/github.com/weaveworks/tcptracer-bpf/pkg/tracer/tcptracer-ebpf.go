// Code generated by go-bindata.
// sources:
// ../dist/tcptracer-ebpf.o
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tcptracerEbpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5c\x0f\x6c\x5b\xc7\x79\xbf\x47\x8a\x16\x25\xc7\x93\xe6\x84\x09\xfd\xb6\x02\xca\x56\x24\x9a\xda\xa4\xd4\x1f\xcb\xaa\xd6\x74\x5a\xd2\xa4\x9a\x10\x40\x5c\x60\x2d\x82\xb1\x8c\x62\x59\xda\x52\xe8\xda\xb4\x48\x47\x7a\x61\xd1\x79\x2b\xdc\x7a\x42\x5a\xc8\x69\x5a\xa8\x46\x36\x88\xb2\xdc\x68\x5b\xb6\x1a\xd8\x56\x0b\x43\x31\x0a\x45\xb0\x69\xc3\xfe\x08\x43\x36\x78\x80\x8b\x09\x83\x57\x68\x03\x3a\xa8\x5d\x66\xa8\x69\x30\x0e\xbc\xef\xf7\xf8\xde\x7d\xef\xde\x23\x15\xa7\x19\x81\xe4\xf3\xfd\xde\x7d\xf7\x7d\x77\xf7\xdd\x77\xbf\xbb\xf7\xec\xdf\x7c\xf2\xe9\xa7\x42\x86\x21\xec\x9f\x81\xff\xf8\x6f\xe3\x71\xe7\xcf\x23\xf8\xff\xcf\x08\x43\x54\xee\x27\xec\xa2\x10\xe2\xa7\x84\x10\xa5\xf6\xdd\x6a\xad\x6c\xa5\xf3\x12\x2f\x99\x7b\xb2\x5c\x59\xa1\x7a\xad\x21\x21\x76\xab\xd5\x6a\xe5\x2a\xca\x61\x21\xf6\xaa\xd5\x6a\x9c\x19\xbd\xd1\xe2\xb4\x1b\xaa\x95\x81\x7f\x15\xd2\x7a\x20\xc9\xec\x8e\x4a\x3b\x37\xd0\x4e\xc9\x1c\xf1\xd8\x1d\xd5\xd8\xb9\x88\xfe\xc6\xc4\xbd\xf2\x89\x75\x80\xf0\x66\xf4\xc2\x42\x88\x53\xad\x42\x74\x09\x21\xe6\x20\x27\x5a\xdb\x0d\xae\x3f\x12\x60\xb7\xd2\x4a\xe5\x58\x6b\x98\xec\x9f\x43\xd9\xa0\x49\xb1\xca\xe8\x57\x08\xfd\xea\x49\xd0\xf8\x16\x50\x2f\x7c\x5c\xfa\x31\x11\xfe\xb1\x6c\xcf\x9a\x8d\x4a\xfc\xb9\xc3\x3f\xa2\x71\x6c\x83\xde\x95\x9d\x2a\xc9\x6d\xc8\x9b\x90\x5b\x90\x9b\x90\x1b\x90\xeb\x90\xd7\x21\xd7\x20\x97\x21\x97\x20\x17\x21\x2f\x41\x5e\x80\x9c\x87\xcc\x43\x4e\xd7\xfb\x11\x92\xfd\xa0\x72\xc9\xa4\xe7\xd6\xb9\x4e\xcc\x1b\xe9\x59\xb3\x71\xf4\xb7\x9b\xea\xf5\x5c\x00\xde\x05\xbc\x0b\x38\xd9\xb5\xf2\xdd\x84\xb7\x93\x3f\xd6\xf9\x04\x95\x4f\x90\x9f\x56\x71\x88\xe2\x66\x9e\xa2\xb7\xb4\x80\xfe\x8c\x51\x7f\xac\xf9\x51\x7a\x3e\x9b\x44\xfb\xe8\xff\xc2\x75\x65\x5c\xd2\xb3\x45\xf9\x3c\xd3\x73\x0b\xfe\xcc\xa3\x4c\xe3\x5a\xf9\x05\x1a\xef\xb9\x36\x8a\x87\xdc\x95\xdb\x12\x9f\x0b\x09\x51\xf3\x28\xd7\xf3\x3d\xb4\x93\x87\x1e\xcd\xc3\xcc\xec\x05\x59\xce\xf5\xec\xe0\xf9\xa7\x65\xf9\x54\x88\xda\x49\x5b\x53\xb2\x3c\xfe\x32\xb5\x9f\xb6\xa6\x49\x16\x4e\x53\xbd\x30\xd5\x1b\xff\x0a\xe6\x7b\x18\xf3\xda\x43\xf3\x9a\x35\x32\x72\xdc\x63\xc6\xe7\x10\x5f\xaf\x50\xdc\x1b\x86\xc4\x23\xe2\x4f\x28\x5e\x10\xa7\x39\xf3\x19\xa9\xd7\xf1\x05\x2a\x57\xca\x24\x5b\x0d\x21\x9e\xa9\x56\xab\xf6\x3c\x56\x32\x4e\x3c\xd7\x96\xec\x4c\x99\xf4\x72\x26\xf5\x23\x22\x96\xd1\xcf\xa1\xaa\x3b\x7e\x33\x3d\x93\x90\xef\x50\xfd\x9e\xe3\x90\x77\x50\x6f\x1a\xcf\xf7\x10\x1f\x14\x0f\xb6\xbd\x8e\x7b\xbd\x7e\x4d\xc2\xaf\x16\x97\x3f\xd6\xb9\xae\x86\x7a\xef\x68\xf5\xba\x1b\xea\x1d\x77\x8d\x83\xa3\x97\x68\xa8\x77\x47\xab\x47\xf1\xd9\x71\xbf\xb7\xfe\x34\xea\x47\x35\xe3\x6d\x9d\xa3\x78\xb6\xae\xd2\x78\xe9\xec\xed\x69\xfa\x97\x5e\xc5\xf8\x8f\xd1\x7c\xa4\xaf\xd2\x3c\x64\x86\x07\x28\x1e\x57\xec\xf9\xa0\x79\x9b\x29\xdf\xc1\xbc\x0e\x53\xfd\x6b\x34\x2f\x99\x13\x1f\x93\x32\xd6\x92\x53\xe2\x70\x0e\x32\x16\xa6\x38\x7d\x36\x24\x44\xb5\x2a\x44\x2c\x74\x92\xca\x06\xca\x06\xc5\xb9\x9d\xe7\x4a\xe6\x34\xcb\xe3\xf3\x4a\x9e\x70\xf7\x2b\x8f\x7e\x75\xa2\x5f\x9d\x2c\xef\x26\xd8\x3e\x33\xad\xc9\xc3\x11\xf1\x8c\x94\x31\xe3\x61\x99\x47\x63\xc6\x63\x72\x7c\x6a\xeb\x22\x22\x9f\x53\x3e\xb0\xfd\xc9\x98\xc7\xe1\x0f\x8d\x5f\xc7\x53\xfe\x71\x18\x3c\x5f\x93\xbe\xf3\x75\x5c\x33\x5f\xa7\x04\xc6\x15\xb2\xd6\x8f\x1f\x56\xab\x55\xbb\x1f\xcf\x75\xf6\xd6\xfd\x34\xa4\x7f\x1b\x58\x7f\x09\xe6\x3f\xcd\xb3\x55\xa6\xbc\xaa\x8b\x37\xf7\x7a\xe0\xfe\xa7\xcb\x88\x13\xf3\x16\xda\xff\xa0\xd2\x7e\xce\xa4\x38\xe9\x38\xe0\x6d\xf7\x4e\x60\xde\xb0\xe3\xeb\x36\xda\x3d\xc2\xfc\x46\x1e\x28\x77\xf9\xfa\xbd\x17\xe8\x37\xe2\xd5\xdc\x46\xfb\x87\x98\xdf\x27\xa9\xdd\x5f\xf3\xb6\x7b\x32\xd0\xef\x93\xf0\xfb\x7b\x68\x97\x36\xea\x74\xf9\x38\xec\xdd\xf4\xf0\x90\x66\xe2\xb2\x11\xff\xf9\x7f\xe3\x5d\x71\xce\xbb\x92\x6c\xbd\x8e\x7a\xec\x26\x83\xf8\x0f\xe2\x24\x76\x20\xea\xe1\x4d\x7e\x7a\xb5\x75\x6a\x9d\xc4\x38\x34\xc9\xef\x1c\x9e\xf5\x63\xea\x47\x9d\x67\x11\x4f\xb2\x56\x78\x3f\xba\xaa\x6a\xbd\x49\xe2\x59\xc6\x7f\x13\xcf\x3a\x07\x9e\xf5\xe0\x0f\x84\xaa\x07\x5e\x65\x62\xff\x35\xc1\xab\xb0\x1e\x4b\x26\x78\x85\x09\x5e\x61\x82\x87\x98\xe0\x55\x26\x78\x95\x09\x5e\x65\x82\x57\x99\xe0\x55\x2c\x1f\xda\xf9\xb2\x64\x4e\x29\x79\xe9\x46\x18\x3c\x6b\x78\x12\xfb\xe9\x14\xf8\x0a\xf1\x2c\xab\x00\x7e\x35\x9c\x57\xf6\x5b\xab\x40\xfb\xa5\x55\x04\x9f\x1a\x83\xdd\x61\xf0\xb2\x42\x02\xcf\x87\xf0\x1c\x7e\x0e\x83\x87\x15\x90\xdf\x8a\xa3\x78\x8e\x7e\x0d\x83\x87\x15\xc0\xaf\x86\xd7\x94\x71\x48\x17\xc1\xab\xc6\xfe\x16\x7c\x0d\xbc\x6a\x8c\xc6\xb1\xf2\x24\x8d\xef\x5c\x04\xbc\xea\xc4\x9b\xc4\xab\x5a\xc0\xab\xc6\xfe\x19\xed\x80\x57\x8d\xd1\xb8\xcf\x14\xc1\xab\xc6\x6e\xe2\x39\xf8\x52\x0b\x78\xd5\x79\xda\x9f\xc6\x8f\x63\xfe\xc6\xc0\xf3\x8a\xc4\xb7\xd2\xe7\xc1\xc3\x60\x77\x1c\x7e\x94\x4e\xd8\xf3\x08\x5e\x63\xd2\x3e\x3a\x11\xfa\xa6\xa8\x85\x74\xe5\x35\xc4\x65\xab\x10\xeb\xd5\x6a\xb5\x63\x10\xf1\xea\xca\x2b\x09\xd7\xfe\xe5\xd9\x27\xca\x68\xf7\x01\x8a\x33\xab\x9c\x40\x19\xed\xb8\xe2\xbe\x8b\xad\xeb\x49\xed\x3e\x77\x85\xfa\x11\xc5\x3e\x02\x39\x11\xfd\x3a\x8b\xdf\xe6\xe2\xcb\xee\xaf\xbd\x4e\x4a\xe6\x2e\xe4\x0e\xf2\xe1\xdb\x90\x7b\xc0\xb7\x91\x0f\xb1\xff\x9c\xa3\x38\xe0\x3c\xa9\xe6\x7f\xa7\xcf\x38\x45\x95\x7d\xd4\x5f\x3f\xce\xf4\xbb\xf6\xa1\xef\xd6\xdb\xdd\xa7\xdd\x28\xd3\xdf\xd1\xea\x37\xe6\x95\x6f\xbf\x4b\x5e\xb9\xb7\x4f\x5e\xb9\xdd\x14\x4f\xd9\xf6\xe5\x29\x5a\xde\xfc\xfb\x88\x8b\x2b\x14\x27\xd6\x37\x10\x1f\xcf\x53\xfc\x54\xd2\xa4\x3f\x7e\x99\xa4\xf5\x1a\xe2\xe6\x45\xe4\x9f\x35\x9c\x53\x17\x28\xfe\x66\x56\x11\x47\x63\xf3\xe0\xa5\x7b\xe0\xa5\x2f\x32\xde\xfa\x59\xe2\xa1\xc6\x2f\x51\x1c\x0f\xc7\xc9\xde\x6f\xc1\x5e\x3d\x8f\xff\x22\xf5\xe3\x97\xa9\xec\xf0\x50\x1a\xa7\xca\x83\x1c\x3f\x4a\xed\x8d\x45\x91\x27\x3b\xd9\x3e\x31\xa2\xcd\x03\x56\x39\xa9\x94\xdd\xe3\x36\xa4\xe1\xad\x13\x6d\xb4\x11\xda\xe3\x73\xca\xc0\x3a\x85\x8c\x4b\x5a\xe1\xf0\xbd\x0f\x3c\x48\x1b\xda\x44\x2b\xf1\x24\xbb\x9f\x8d\xf4\x9e\x7b\x90\x26\x72\xee\x00\x3d\xcf\x3c\x4f\xf3\x63\xe7\x83\xcc\xc2\x07\xe1\x3f\xf5\xf7\x96\x41\xfe\xe5\xcc\x6e\xe0\x9d\x0c\xef\x01\x1e\xc7\xfa\xfe\xb0\x67\xff\xe7\xf9\x29\xa1\xcd\x4f\xe8\xbf\x4b\x6f\xb2\x09\xbd\xfd\xf0\xa4\xa8\xe4\x2b\x23\x6c\xfe\x68\x5f\xb0\x4e\xd1\x3e\x60\x4d\xe7\x3d\x7e\xdc\x0c\xe2\x15\xb8\x5f\x89\xb5\x51\xc2\xb7\x10\xd7\x13\xc6\x35\xc9\x17\x2a\xe7\xf4\xf3\x52\x3b\x5f\xb4\xca\x7a\xcb\xb2\x1d\xce\x9f\x72\xd8\x17\x9b\xbf\xbf\x22\xde\x69\xe1\x79\xcc\x68\x97\xf6\xef\xbe\xdd\x97\x30\x3f\xbf\x83\xf6\x69\x5f\xaf\x7c\x9e\xea\xe9\xf2\xc2\x75\x4d\x1e\x9a\x29\x93\xdd\x09\xe3\xfb\xd5\x90\xc2\xeb\x55\xde\x93\x81\x7f\x19\xec\x27\x39\xec\x1b\x39\xec\x1b\x76\x3f\x32\xd8\x67\xac\xcb\xf1\xa6\xfd\x51\xf2\xd4\xe5\xae\x86\x7a\xbb\x5a\xbd\xee\x86\x7a\xdb\xba\x3c\x7c\x39\xd1\x50\xef\x1d\xad\x1e\xf2\x77\xdc\x5b\x7f\xd4\x9d\xbf\x3f\xef\xcc\x1b\xe9\xd9\xf9\x7b\xd4\x37\x7f\xef\x68\xef\x05\x30\xfe\x63\x4b\xc8\xaf\xbb\xc8\xaf\xaf\x22\xff\x62\x3e\x7a\x68\xde\x66\x70\x1e\xcc\x99\x2b\x54\xff\x1a\xcd\x4b\xe6\xc4\x2a\xe5\xe3\x96\x4f\x48\x7b\xde\x7b\x01\x4a\xc0\xce\xbd\x00\xe5\x6d\x27\xef\x3e\x46\x7a\x9e\xfb\x55\x5a\x37\x11\x41\xe7\x5d\x77\x1c\x2f\x05\xc6\x71\xbf\x2c\x3b\xeb\x41\xcf\xc7\x75\x71\x23\xf9\x44\x58\x1d\xdf\x8b\xd2\x07\xe7\xde\xd9\xba\x4a\x79\x85\xf7\xb3\x34\xec\x9c\x2b\x0c\x19\xb7\xb4\x2f\xa6\xcb\x7f\x8a\x38\xfe\x75\x94\xed\xf8\xcf\xa3\xfc\x2a\xca\x45\x94\x69\xbc\x2b\x87\xc9\x8f\x5b\xd8\x3f\x72\x3d\xb4\x2f\xce\x21\x1f\x3b\x79\x19\xfb\x63\x79\x15\xed\x7c\x16\x79\x7a\x43\xe1\x75\x56\x79\x5d\xe1\x77\x95\x55\xf4\xbf\x85\xe2\xcb\xde\x8f\xe2\x21\x75\x5c\x6f\x44\x84\x18\xc2\x38\x1c\x69\x72\x1e\xc2\xae\xf3\xb1\x93\xa7\x42\x94\xa7\x50\xaf\x7e\xce\xbc\xeb\x3c\xf3\x3f\xd5\x76\x65\xbe\x9b\x3d\x8f\x8d\x2a\xf9\x68\xdf\xbc\xf6\x72\x52\xeb\xb7\x8e\xd7\x8e\xea\xf8\x61\x80\x3e\xe7\xb5\x4b\xfb\xd0\x6f\xc8\x6b\x03\xec\x36\xc5\x6b\x9b\xc8\x8b\x5a\x5e\xdb\x44\x5e\xd4\xf2\xda\x80\xbc\xb8\xdd\x54\x5e\xdc\x27\xaf\xad\xdf\x4f\x52\x9c\x58\xd7\x10\x1f\x38\x07\x8e\xc7\x10\xb7\xc8\x97\xa5\x61\x8a\x2f\x6b\x15\x7c\xd6\x3e\x8f\xae\x20\x7e\x7a\xb6\x90\x3f\xc1\x67\xcd\x7f\xa4\xf5\xba\x0c\x3e\xdb\x4e\xe7\xdb\x58\x84\xf2\xc0\xf8\x00\xb5\x1f\x6b\xb9\x22\xcb\x4e\xde\x24\x3f\x9c\xbc\xf9\x35\xca\x43\x9e\xbc\x79\x40\xe6\x4d\xf7\x3a\xbd\x1e\xb8\x4e\xbf\xe4\xe1\x09\x7e\xf5\x29\xbf\x7e\x91\xf1\x2a\xfd\xbd\x86\x2e\x7e\x7f\x32\xf9\xf5\x55\x25\xbf\x5a\xc8\x0b\xd6\x0a\xd6\x7b\x8f\x7a\xce\xb5\xf3\xa2\xb5\x82\xfc\xd0\xa3\xde\xbb\x58\xe5\x2d\x9f\xfc\x4b\xf7\x1f\x9c\x67\x57\xee\x23\x99\xa2\xeb\x51\x79\x4f\x21\xf3\x33\x64\x6e\xec\xe5\x7a\xde\x96\xbc\xdb\x7c\x05\x76\xd6\x58\x7e\x5e\x7e\xd7\xf9\x39\xe9\xca\xcf\x11\x41\xfd\xb3\xf9\x30\xe7\xbf\xce\x7d\xde\x50\xbd\x2c\xd7\x4f\x14\x71\x3d\xb3\x4f\x5e\x5c\xbf\x6f\x2b\x2a\xef\x35\x27\x8c\x59\x23\x2c\xcf\x83\x38\x17\xe1\xfd\xd2\x0d\xd8\x29\x2d\xd0\xf8\x67\x16\x28\xfe\xed\xf3\x6b\x05\xef\xb5\x74\xeb\x75\x53\x7b\xce\xb6\xd7\xf9\xa6\xef\x3a\x7f\x53\xb3\xce\x4b\x0b\x14\x67\xb9\x85\x65\x4f\xfc\x07\xbd\xc7\xf5\xf2\xef\x43\x8c\x7f\xa3\x5d\x73\xbf\xed\xd2\xc2\x88\x00\x77\xda\x7f\x06\xeb\x74\x94\xc6\xd7\xde\x2f\x03\xc6\x69\x59\xbb\x5f\x2e\x63\xbf\xfc\x4f\xc6\xcb\xd5\xf5\x9b\xc1\x7d\xa4\x3f\x2f\x1f\x51\x79\xb9\xfd\xbe\x2e\xc0\x9f\xc5\xa0\xf7\x75\x01\x7a\x5a\x5e\x6e\xdf\xab\x04\xe8\x69\x79\xb9\x7d\xaf\x12\xa0\xa7\xe5\xe5\xf6\xbd\xca\x11\x6f\xfd\x11\xf7\xfe\xf3\x15\x67\x3e\xd5\xb8\x1c\xd9\x27\x2f\xc7\xf8\xe3\x3e\xd5\xe1\xe5\xab\x8c\x97\xaf\x31\x5e\xfe\x07\x8c\x97\xbf\x0e\x5e\x4e\x0b\xd4\xcb\xcb\xe9\x40\xed\xec\x2f\x14\xd7\xf6\xfe\x32\x61\xbc\x49\xfe\xba\xe2\xb7\x16\x57\x11\xf1\x57\xe2\xbd\x89\xc3\xff\x12\xed\x4d\xf0\x74\xef\xfe\x62\xdf\xc3\x2c\xbe\x3b\xde\x66\xdf\xeb\x31\xbf\x75\xbc\x6d\x24\xe8\x5e\x50\xa3\xcf\x79\xdb\xe2\x3e\xf4\x9b\xbe\x8f\xd4\xd8\xdd\xd7\x7d\x64\x80\xdd\xc0\xfb\xc8\x00\xbd\xc0\xfb\x48\xcd\xba\xd9\x6e\x6a\xdd\xec\x93\xb7\xad\x22\x2e\xec\xef\x3c\xae\xda\xef\x2b\xd6\xb0\xdf\x23\x4e\x7a\xc0\x0f\xca\x3b\x4a\xbc\xcd\x2c\x23\x6e\xda\x29\x0e\x67\xf0\xde\x3b\x77\xe2\x3b\xb4\xae\x5e\x03\x5f\x7b\xf1\x0d\xca\xeb\xc7\xc8\x9f\xf1\x4f\x92\x8c\xb5\xd2\xbd\x52\x05\xf7\xf6\xe3\x0f\xdb\x78\x56\xca\x67\xc1\x1a\x62\x82\x2e\x60\x9f\x8d\xa0\x1c\xa1\x8d\xdd\xce\xfb\x13\x2d\xf4\x27\xbe\x5e\xe3\x72\xb9\xba\xee\x05\x9f\xa0\x7b\xb4\x89\xd0\x17\xa9\x7e\xc3\xfb\xc0\xdf\xae\x8f\x73\xc4\x75\x3f\x76\x0a\xf7\x83\xf6\x3d\x61\xe9\x79\xe7\xfb\xaa\xb0\x5c\x37\x49\x8c\xd7\x10\xe3\x31\xc7\x19\x0f\x54\xdf\x1b\xa4\xcb\xaf\x63\xdd\x4d\xa3\xfc\x6d\x94\x4f\x2b\x3c\xcc\xcb\xb3\x88\xa7\xc5\x5b\x55\xff\xed\x7a\xa9\x59\x92\x73\xa8\xef\xe8\xcd\x32\xff\x8a\x1e\x1e\x3a\xa9\xb9\x8f\xb5\xca\x38\x87\xaf\x80\x1f\xe2\xfb\x8a\x0a\x78\xf8\x1c\xde\x1f\x55\x68\x19\x78\xde\xcf\x57\x70\x1e\x88\x09\xec\x83\x76\xb9\x85\x08\x58\x85\x5e\xc3\xd5\xe7\xdf\xa9\x7f\x58\x79\x9e\xca\x0b\x55\x5f\xb2\x34\x95\x07\xd6\xf2\x91\xfd\x7e\x88\xf3\x40\xfb\x5e\x9f\x9f\xd7\xed\xfe\xf9\xf6\xeb\xb0\x6a\x37\x33\x6c\xef\x3f\xc4\x53\x6f\x45\x30\xbe\xf8\xbe\xca\x7f\xfc\xaf\xb0\xf1\x7f\xd5\xc3\x7f\x16\x03\xcf\x21\x1f\x16\xbc\xfe\x72\x60\xfd\x87\xea\xe5\xf7\x27\x9e\x97\x59\x3c\xaf\x2a\xf1\x9c\x06\x9f\xf7\x8b\x67\xef\xbd\xcd\x2c\x5b\x27\xcd\xc5\xeb\xdd\xc6\x03\xbf\x7f\x79\xbf\xc6\xcf\x3e\xdf\x58\x2b\xd8\xcf\x7b\xf2\xec\xfc\xc3\xcf\x6d\xea\x7b\x70\xff\x7c\x71\xc9\xd5\x7f\x57\xbe\xc0\xbe\x91\xfa\x79\xc4\x2b\xf6\xf7\x5b\x90\xb9\xe1\x05\xe6\xff\x4b\x3f\xb1\xf1\x4f\xca\x31\xfe\x07\x65\x3c\x9c\xef\x3c\xf1\xbd\xcb\x11\xf5\x7b\x0b\xfb\x7b\x09\x7e\x3e\x8b\xb5\x0d\x78\xbe\x9f\xd0\x7d\xdf\xe1\x3d\x9f\x3d\xc2\xce\x67\x1f\xa2\xf3\xd9\x02\xce\xd5\x68\x3f\xb7\x80\xef\x73\x16\xde\x02\x5f\x6a\xbc\xff\xbf\xb5\x0f\xde\xd0\x8a\xef\x15\x1a\x7d\x27\x57\x5a\x00\x8f\x5d\xc0\xf7\x2e\x4d\x9c\x0f\xf5\xbc\xc7\xe6\x13\x3b\xbe\x7c\x42\x77\xce\x28\x2d\x2c\x61\x1c\xa6\x3c\x79\x2c\xf8\xfe\xb9\xd1\xf9\x10\xed\x9a\xfb\x6d\xd7\xef\x7c\x38\x8e\x7c\xf8\x03\xe0\x8d\x79\xf9\x54\xad\xbf\x51\xbc\x47\xf3\xf0\xf3\x29\xf0\xf3\xff\xa8\x86\x94\xfc\x80\xef\x3a\xf0\xbe\x93\xf3\x8d\x92\x99\x54\x78\x7a\x06\xdf\xdd\x3a\xe7\x4c\x9c\xf7\xcd\x37\x20\x37\x20\x6d\x5e\xb0\x0e\x69\xdf\x97\xdb\xef\x87\x5e\x47\x9e\xc4\x39\xc8\xa4\xef\x46\x9c\xf7\x9a\xaf\x23\x3e\x1a\x9f\x43\x37\x02\xce\xa1\x3a\x9e\xfa\x86\xfb\x3b\x33\xc6\x53\x9d\xef\xd8\x70\xdf\x57\xa6\xf5\xe2\xe4\xf7\xbf\xf1\xe4\x93\xeb\x5a\xfe\xa1\xe6\x35\xfb\x3b\xe0\x39\xc8\x58\xe8\x5b\x12\x77\xe7\x97\xda\x90\x3e\x72\x98\xbe\xe3\x4d\x97\x37\x15\x7d\xe7\x3c\xf7\x4d\xa1\x9b\x27\xca\x3b\x86\x78\xe4\xf0\x1f\x52\x7f\x5d\xf9\x6c\x49\xe6\xb3\x49\x6d\x3e\xb3\xae\x22\x4f\x60\x3f\x89\x88\x95\xf7\x38\xde\xbe\x2e\xcf\x83\xef\x5d\xbc\xd9\xe7\xbe\x5b\x90\x37\x21\xdf\x84\xdc\x52\xe2\xe9\xbd\x8b\xcf\xdb\x3e\xf1\xd9\xf8\xdc\xb7\x75\x97\xe7\xbe\x9b\xfb\xd4\xe7\xe7\xdd\x8d\x00\x7d\x7b\x7d\xb4\xb6\x79\xcf\xb9\x9b\x01\xe7\x39\x67\x9d\x6c\xfb\xac\x93\x7f\x6b\x72\x9d\x6c\x82\x1f\xd0\xbc\x4c\x84\xf0\x1d\x01\xfa\xd3\xf8\xbc\xd4\x86\x38\xc6\x77\x00\xab\x34\xff\x13\x2d\xf4\xc1\x56\xe5\x28\xda\xc1\xf7\x5f\xf6\xf7\x67\x94\x55\x5c\xe7\xa8\x48\xa2\xde\x3f\x8a\x53\x7c\x6f\xf7\x1a\xe2\xf1\x45\xe7\xbb\xe6\x90\xeb\x3d\x5f\xe6\xf9\x22\xe3\x47\x2a\xbf\x49\x97\xed\x38\xbc\x84\xb2\x1d\xb7\x2f\xa1\x6c\xdf\xc3\x2d\x2a\x7c\x32\x67\xbe\xcc\xe2\xef\x15\xcf\x78\xce\x6b\xc7\xf3\x52\x83\xbc\x43\x07\x58\x6f\xde\xa1\x8b\xee\x74\x79\xd1\x27\xef\x50\x3e\xf5\xcf\x3b\x3f\x4b\xe3\xed\xca\x3b\x53\x01\x79\xa7\x82\xbf\xff\xe2\xe4\x1d\x9a\xf0\x71\x7c\xbf\x13\x33\xc8\x81\xf1\x27\x50\x0e\x77\x0a\xf7\x78\x79\xfd\xbb\xa7\x81\x7f\x51\x8f\x7f\xcd\xe6\xc5\x64\x00\xcf\x6e\x71\xfd\x27\x5a\xfc\x31\x03\x7c\x2f\xda\x04\xd6\x69\xc7\xa7\x0b\xeb\xd6\x60\x35\xbd\x4b\xae\xbf\xef\xf5\xc9\xe4\xd3\xe2\x7f\x5d\xdf\x94\xeb\x7e\x8b\x92\x6e\x44\x44\xf2\x80\x8a\xc7\x81\x27\x5a\x55\xfc\x8f\x42\x84\xef\x30\xfc\x2c\xf0\xc9\xb0\x8a\xdf\x03\x7c\x91\xd5\xff\x77\x83\xf0\xd1\xa8\x8a\xff\x05\xf0\x3c\xf3\xe7\x02\xfc\x59\x66\xf5\x93\xc0\xaf\x33\x3c\x61\xe3\xcc\x9f\xbf\x43\xfb\xdb\xac\xfe\xef\x01\xdf\x65\xf8\x35\xe9\x7f\x9b\xc7\xff\x16\xe0\x9b\x0c\xff\xae\x41\xf8\x14\x6b\xe7\x5b\xc0\x17\x19\x4e\xfe\xb5\x79\xfa\xf5\x97\xa8\xbf\xc1\xfc\xef\x94\xe5\x83\x62\x9b\xe1\xa7\x42\x84\x4f\x47\x54\xfc\x1d\x83\xf0\x25\x86\xff\x13\xf0\x35\x86\xff\x31\xf0\x75\x86\x7f\x15\xed\x77\xb6\xa9\x78\x0a\xf8\x08\xc3\x7f\x04\x7c\x4d\x85\xc5\x24\x70\xfe\x97\x12\xbf\x0f\xbb\x49\x86\xaf\xcb\x7e\x1e\x12\xa3\x2d\x2a\x7e\x09\xf8\x52\xbb\x8a\x4f\x01\xdf\x61\xf8\x08\xf0\x0d\xd6\x7e\x14\xf8\x16\xc3\x7f\x37\x44\xf8\x14\xb3\xbb\x86\xfa\xeb\xac\xfd\x79\x1b\x67\xf1\xd0\x6d\xfb\xc3\xf0\x2f\xa1\xfd\x38\x9b\xf7\x65\xd4\x1f\x62\xed\xe7\x81\x77\xdf\xa3\xe2\xa3\xc0\x3b\x19\xde\x05\x3c\xce\xf0\x1f\xc2\x6e\x9e\xf5\xf7\x73\xc0\x6f\x32\x9c\xd6\x73\x87\x18\x65\xf9\x70\x08\xf8\x24\xc3\x05\xf0\x2d\x36\x6e\x6f\x19\x84\x5f\x60\xe3\xf0\x0d\xe0\x7c\x1d\x5d\x0c\xc1\x2e\x8b\xab\x25\xb4\xbf\xcd\xf0\x69\xe0\x3b\x0c\x9f\x43\x3b\x7b\xac\x5f\xbf\x0a\x7c\x8a\xf9\x7f\x51\xee\xb7\x71\xc1\x7f\x0f\x49\xfc\x88\x07\xff\x7b\xb9\xdf\xde\xeb\xc1\x1f\x91\xf8\x7d\x1e\xfc\x37\x64\x3b\x87\x3c\xf8\x47\x24\x7e\xd0\x83\x7f\x47\xe6\xff\xb0\x07\x3f\x21\xf1\x56\x0f\xde\x2a\xf1\x0e\x0f\xbe\x26\xf1\x88\x07\x1f\x91\x78\x9b\x07\xff\x73\xe9\xff\x4f\x7b\xf0\x23\x12\x3f\xec\xc1\x63\xd2\xff\x07\x3c\xf8\x6d\x59\x3f\xe6\xc1\x9f\x90\xf8\xfd\x1e\x7c\x14\xb2\x36\x5d\x1f\x15\xc4\x05\xdc\xe5\x3c\x2b\x5f\x77\x95\x3f\x51\xab\x7f\xc0\x29\x3f\x29\x84\xd8\x8a\xaa\xcf\xdd\xed\x0f\xb3\xf6\x87\x59\xfb\xb5\xf2\x32\x6b\x7f\x2d\xcc\xda\x8b\xaa\xf6\x2e\xb8\xca\x4f\x31\x7b\xb5\xfa\x5b\xac\xdc\x6d\xa8\xe5\xdd\xb0\xda\xde\x68\xc4\x29\x3f\x5e\xcb\x33\x11\xf5\x79\x57\x9b\x6a\x2f\xc9\xca\x76\x1e\xac\x95\x6b\xd4\x29\xc9\xec\x8f\x30\xfb\x4b\xac\xbc\xdd\xa6\xda\x5f\x6a\x57\xed\x6f\xb6\xab\xf6\x76\x0f\xaa\xf5\xf3\x87\x54\xfb\x93\xcc\xfe\x26\xb3\xd7\x15\x62\xe3\xdd\xa2\xb6\xd7\xc5\xfc\xd9\x68\x53\xdb\x17\x8f\x16\xb3\xf3\x45\x91\x9b\xcd\x16\xf3\xb3\x67\x3f\x95\x4d\xa5\x66\xce\x64\x8b\xa9\x4c\x21\x97\x4a\x67\x32\xd9\x7c\x51\x3c\x3a\x9b\x3d\x5d\x7f\xfc\x11\xfe\xd4\xa5\x58\xcc\xe4\x53\x2f\x0c\xa6\x32\x67\xcf\x9c\xc9\x66\x8a\x22\xa7\x87\xd5\xe6\x74\x0f\xb5\x4f\xb8\x9d\x01\xbd\x9d\x81\x20\x3b\x03\xbe\x76\x9c\x27\x9f\x49\xe7\x0b\x35\xac\x38\x9b\xce\x64\x67\x53\x85\x62\xba\x78\xbe\x20\x52\x2f\x64\x67\x0b\x33\x67\xcf\x28\xc6\x0a\xd9\xa2\x7c\x9e\xe5\xcd\x39\x0f\xdc\xd5\x33\xa7\xcf\x16\x3c\x55\x09\x4c\x9d\x9e\xc9\x64\xcf\xd4\x9e\x16\x8a\xb3\xc5\xf4\xa7\xc4\xa3\x05\xeb\x33\x35\xf9\xf4\xe3\x8f\xf7\xa6\xfa\x3e\x5a\x93\x83\xa9\x5e\x29\x07\x20\xfb\x21\x7b\xeb\xe5\x21\x54\x1f\x42\xb5\x21\x54\x03\xde\x0b\xfc\x18\x5a\x3b\x86\x6a\xc7\x50\xed\x18\xaa\x1d\xab\x8f\x41\x2a\xfb\x42\xf6\x4c\x31\x35\x93\x7f\x61\x90\x30\x0c\x52\xe1\x6c\x26\xe7\x42\x8b\xe7\xf3\xa7\xb3\xf9\x99\x4f\x13\x24\x1b\x1f\xa4\xb6\x21\xfa\x20\x7b\x07\x61\x02\xb5\x8e\xd6\xc4\x51\x12\x83\xa9\x3e\x14\x49\x0e\xd4\xcb\xbd\x47\xe1\xe0\x51\x68\x1f\xd5\x38\x38\xa0\x75\x70\xc0\xeb\xe0\x00\x35\x3a\x40\x36\x06\x30\x16\x40\x7b\x01\x93\xec\xad\xe3\xfd\xfd\x70\xad\x1f\x43\xdc\x0f\x3d\xe0\xb6\xec\xef\xc3\xf3\x3e\x3c\xef\xc3\x73\x94\xfb\x7b\x51\x0f\xb2\xaf\x17\xf5\x51\xee\x45\x99\xe4\x60\xaa\x3f\x81\xfa\x90\x7d\x09\x1a\x8a\x3e\x94\x7b\x13\xe2\x6e\x7f\x5f\xc6\xfb\x0b\xcf\x8f\x3e\x47\xf6\xf0\x69\x46\x0b\xea\xff\x5e\x06\x3b\x7e\xe0\xdf\xc8\xf0\xfe\x18\xcd\x11\x6f\x37\xd0\x9f\x67\x38\xa3\x7f\xe2\x8e\x64\xfd\xde\xdf\xc6\xc7\x48\xe2\x35\xa2\x30\x41\xb5\x6c\x7d\x1b\xff\xae\x8f\xfd\x75\xfb\x0f\x6d\xc1\xf6\xff\xc5\xc7\xfe\x16\xec\x27\x5d\xf6\x23\x1a\xfb\x2f\xfb\xd9\x47\xa3\x8d\xfa\xff\x65\x1f\xfb\x5d\x8f\xa9\x76\x4c\x70\x1d\x6e\xff\xbc\x8f\xfd\x04\xf6\x29\x7e\x4e\xe4\xf6\xcf\xf9\xd8\x4f\xc0\xfe\x94\xcb\x7e\x9b\xc6\xfe\xaf\x18\x7a\xfb\xdb\xa0\x4c\x9d\x07\x83\xed\x3f\x69\xe8\xed\x2f\xc2\xfe\xa2\xcb\xfe\x41\x8d\xfd\xa2\x8f\xfd\xdd\x0f\x90\x5c\x3a\x14\x6c\x3f\xef\x63\xbf\xeb\xe3\x24\x2f\xb8\xec\x1f\xd2\xd8\x7f\xc8\x67\xfc\x2f\x7d\x88\xe4\x5e\x83\xf8\xfb\x39\x9f\xf1\x5f\x86\x7d\xf7\xf8\x77\x68\xec\xff\x59\x88\xec\xf3\x1c\x70\x01\xf7\x7e\x9c\x91\xf3\xf5\x7b\x9f\x8f\xfe\x2b\x4d\xea\xff\xb5\x8f\xfe\x5a\x93\xfa\xdd\x3e\xfa\xdf\x6e\x52\xff\x5f\x7d\xf4\xb7\x9a\xd4\xff\xb8\x8f\xfe\xed\x26\xf5\x3b\x0d\xbd\xfe\x5e\x93\xfa\x5f\xf0\xd1\xbf\x67\x50\x5f\x9f\xe7\xef\x87\x7d\xf4\x3b\x7d\xf4\x79\xf9\x6b\xb8\xcf\xe5\xbf\x38\xf4\xd7\x5c\xe7\x8b\x63\xae\xf8\xb3\x4f\x8c\xff\x17\x00\x00\xff\xff\x8f\xfc\xfe\xbb\x80\x49\x00\x00")

func tcptracerEbpfOBytes() ([]byte, error) {
	return bindataRead(
		_tcptracerEbpfO,
		"tcptracer-ebpf.o",
	)
}

func tcptracerEbpfO() (*asset, error) {
	bytes, err := tcptracerEbpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tcptracer-ebpf.o", size: 18816, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tcptracer-ebpf.o": tcptracerEbpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tcptracer-ebpf.o": &bintree{tcptracerEbpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

