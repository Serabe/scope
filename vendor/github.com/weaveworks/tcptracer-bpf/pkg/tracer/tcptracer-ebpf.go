// Code generated by go-bindata.
// sources:
// ../dist/tcptracer-ebpf.o
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tcptracerEbpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5c\x0f\x6c\x5b\xc7\x79\xbf\x47\x8a\x26\x25\xc7\x95\xe6\x84\x09\xcd\xfd\x81\xb2\x06\x89\xa6\xd6\xa9\xfe\x59\x56\xb5\xb5\xd3\x92\x26\xd5\x84\x00\xe2\x02\x6b\x11\x8c\x76\x14\xcb\xd2\x96\x42\xd7\xa6\x45\x3a\xd2\x0b\x8b\xce\x5b\xe1\xd6\x13\xd2\x42\x4e\xd3\x42\x35\xb2\x41\x94\xe5\x46\xdb\xb2\x45\xc0\xb6\xda\x18\x86\x51\x28\x82\x4d\x1b\xf6\x47\x18\xbc\x41\x03\x5c\x4c\x18\xb2\x42\x1b\xd0\x41\x2d\x32\x4f\x0d\xbc\x71\xe0\x7d\xbf\xc7\xf7\xee\x7b\xf7\x1e\xc9\x38\xcd\x08\xa4\x9f\xef\x77\xf7\xdd\x77\x7f\xbe\xfb\xee\x77\xf7\x4e\xfd\xf5\xa7\x9e\x79\x3a\x60\x18\xc2\xfa\x19\xf8\xcf\xf5\x7b\xd2\xfe\xe7\x08\xfe\xf7\x27\x85\x21\xca\x0f\x12\x76\x49\x08\xf1\x01\x21\x44\xb1\x6d\xaf\x52\x4d\x9b\xa9\x9c\xc4\x8b\xf1\x7d\x99\x2e\xaf\x50\xb9\x70\x40\x88\xbd\x4a\xa5\x52\xbe\x86\x74\x50\x88\xfd\x4a\xa5\x12\x63\x46\x6f\xb4\xd8\xf5\x06\xaa\x69\xe0\x5f\x87\x34\x1f\x4a\x30\xbb\xa3\xd2\xce\x0d\xd4\x53\x8c\x8f\xb8\xec\x8e\x6a\xec\x5c\x42\x7f\xa3\xe2\x21\x99\x63\x1e\x20\xbc\x11\xbd\xa0\x10\xe2\x74\x58\x88\x4e\x21\xc4\x1c\xe4\x44\xf8\x03\x06\xd7\x1f\xf1\xb1\x5b\x0e\x53\x3a\x1a\x0e\x93\xfd\xf3\x48\x1b\x21\x4a\xaf\xf0\x7e\xf5\xd0\xf8\xe6\x51\x2e\x38\x29\xdb\x31\x11\xac\xc8\xfa\xcc\xf3\x11\x6a\xff\xfd\x94\xff\xc6\x07\x49\xc6\x02\x42\x54\x2a\x95\x8a\x65\xff\xe8\x07\x7f\x44\xe3\xdc\x8a\x7a\xaf\xee\x56\x48\xee\x40\x6e\x43\x6e\x41\x6e\x42\x6e\x40\xde\x84\x5c\x87\x5c\x83\x5c\x86\x5c\x82\x5c\x84\xbc\x0c\x79\x11\x72\x1e\x32\x07\x39\x4d\xfd\x0c\xd0\x7c\x17\xbb\x29\x5d\x8c\x53\xbe\x79\xbe\x03\xfd\x27\x3d\x73\x36\x46\xe9\xee\x2e\x2a\xd7\x7d\x11\x78\x27\xf0\x4e\xe0\x64\xd7\xcc\x75\x11\xde\x46\xed\x31\x2f\xf4\x50\xfa\x24\xb5\xd3\x2c\x0c\x91\x5f\xcd\x93\x77\x17\x17\xd0\x9f\x31\xea\x8f\x39\x3f\x4a\xf9\xb3\x09\xd4\x8f\xfe\x2f\xac\x2b\xe3\x92\x9a\x2d\xc8\xfc\x74\xf7\x6d\xb4\x67\x1e\x69\x1a\xd7\xf2\xcf\xd1\x78\xcf\xb5\x92\xbf\x64\xaf\xbe\x25\xf1\xb9\x80\x10\xd5\x16\x65\xbb\xbf\x87\x7a\x72\xd0\xa3\x79\x98\x99\xbd\x28\xd3\xd9\xee\x5d\xe4\x7f\x56\xa6\x4f\x07\xa8\x9e\x94\x39\x25\xd3\xe3\x2f\x53\xfd\x29\x73\x9a\x64\xfe\x0c\x95\x0b\x52\xb9\xf1\xaf\x61\xbe\x87\x31\xaf\xdd\x34\xaf\x19\x23\x2d\xc7\x3d\x6a\x7c\x01\xfe\xf7\x0a\xad\x0b\xc3\x90\x78\x48\xfc\x91\x70\xfa\x61\x36\xfe\xac\xd4\x6b\xff\x12\xa5\xcb\x25\x92\x55\x2f\x7e\xb6\x52\xa9\x58\xf3\x58\x4e\x13\x5e\xf5\xf7\xea\x92\x9e\x29\x91\x5e\x36\x4e\xfd\x08\x89\x65\xea\x67\x7c\xa8\xe2\xf4\xef\x74\x7c\x12\xf2\x2e\xca\x9f\x80\xbc\x83\x72\xd3\xc8\xdf\x87\x7f\x90\x3f\x58\xf6\xda\xef\x77\xb7\x6b\x12\xed\x6a\x71\xb4\xc7\x3c\xdf\x59\x57\xef\xae\x56\xaf\xab\xae\xde\x09\xc7\x38\xd8\x7a\x3d\x75\xf5\xee\x68\xf5\xc8\x3f\xdb\x1f\x74\x97\x9f\x46\xf9\x88\x66\xbc\xcd\xf3\xe4\xcf\xe6\x35\x1a\x2f\x9d\xbd\x7d\x4d\xff\x52\xab\x18\xff\x31\x9a\x8f\xd4\x35\x9a\x87\xf4\xf0\x00\xf9\xe3\x0a\xe6\xa3\x9b\xe6\x6d\xa6\x74\x07\xf3\x33\x4c\xe5\xaf\xd3\xbc\xa4\x4f\xfe\x82\x94\xd1\x96\xac\xe2\x87\x73\x90\xd1\x20\xf9\xe9\x73\x32\x3e\x09\x11\x0d\x9c\xa2\xb4\x81\xb4\x41\x7e\x6e\x96\x46\x95\x79\xb7\xe3\xe1\xbc\x12\x27\x9c\xfd\xca\xa1\x5f\x1d\xe8\x57\x07\x8b\xcb\x3d\x6c\x1f\x9a\xd6\xc4\xe9\x90\x78\x56\xca\xa8\xf1\x98\x8c\xb3\x51\xe3\x63\x72\x7c\xaa\xeb\x22\x24\xf3\x29\x1e\x58\xed\x49\xc3\x4f\x8b\xf0\xdf\xf6\xa7\xbd\xfd\xd0\x7f\xbe\x26\x3d\xe7\xeb\x84\x66\xbe\x4e\x0b\x8c\x2b\x64\xb5\x1f\x3f\x74\xc4\xfb\x4f\x77\xf4\xd6\xda\x69\xc8\xf6\x6d\x60\xfd\xf5\xb0\xf6\xd3\x3c\x9b\x25\x8a\xab\x3a\x7f\x73\xae\x07\xde\xfe\x54\x09\x7e\x12\xbf\x8d\xfa\x1f\x51\xea\xb7\xd6\x6f\xfb\x01\x77\xbd\x77\x7c\xe3\x86\xe5\x5f\x6f\xa1\xde\x23\xac\xdd\x88\x03\xa5\x4e\xcf\x76\xef\xfb\xb6\x1b\xfe\x1a\xdf\x41\xfd\x87\x58\xbb\x4f\x51\xbd\xbf\xea\xae\xf7\x94\x6f\xbb\x4f\xa1\xdd\xdf\x43\xbd\x01\x99\x9f\x2a\x9d\x80\xbd\x6d\x17\x4f\x69\xc4\x2f\xeb\xf1\xa3\xff\x37\x5e\x16\xe3\xbc\x2c\xc1\xd6\xeb\xa8\xcb\x6e\xc2\x8f\x1f\xc1\x4f\xa2\x07\xee\x73\xf1\x2a\x2f\xbd\xea\x3a\x35\x4f\x61\x1c\x1a\xe4\x7f\x36\x0f\xa3\x25\x63\xf3\xb0\xff\xa1\x74\x29\x51\xe3\x27\xc2\xc1\x2f\xcc\x59\x94\x0b\x7c\x8a\x78\x58\xe0\xbf\x89\x87\xcd\x82\x87\x81\x7f\xbd\x81\x75\x1c\x33\x18\x0f\xbb\xff\x07\x42\x1d\x1f\xf0\xae\x38\xf6\xe7\x38\x78\x17\xd6\x6b\x31\x0e\xde\x11\x07\xef\x88\x83\xa7\xc4\xc1\xbb\xe2\xe0\x5d\x71\xf0\xae\x38\x78\x57\x1c\xbc\x8b\xc5\x4b\x2b\x9e\x16\xe3\x53\x4a\xdc\xba\x11\x04\x0f\x1b\x9e\x04\x4f\x98\x42\x7f\x89\x87\x99\x79\xf0\xaf\x61\xd4\x03\xbe\x66\xe6\x69\x3f\x35\x0b\xe0\x5b\x63\xb0\x3b\x0c\xde\x96\xef\x41\xfe\x10\xf2\xd1\xce\x61\xf0\xb4\x3c\xe2\x5f\x61\x14\xf9\xe8\xd7\x30\x78\x5a\x1e\xfc\x6b\x78\x4d\x19\x87\x54\x01\xbc\x6b\xec\x6f\xc0\xe7\xc0\xbb\xc6\x68\x1c\xcb\x4f\xd1\xf8\xce\x85\xc0\xbb\x4e\xde\x22\xde\xd5\x02\xde\x35\xf6\x4f\xa8\x07\xbc\x6b\x8c\xc6\x7d\xa6\x00\xde\x35\xb6\x8d\x7c\xf0\xa9\x16\xf0\xae\x0b\xb4\x7f\x8d\x9f\xc0\xfc\x8d\x81\x07\x16\x88\x8f\xa5\x2e\x80\xa7\xc1\xee\x38\xda\x51\x3c\x69\xcd\xa3\xca\x7b\x26\x02\x6f\x88\xaa\xcb\x97\x5f\xa3\x72\xe1\xb0\x10\x37\x2b\x95\x4a\xfb\x20\xa5\x9d\x71\xa7\xc7\xb1\xbf\xb9\xf6\x91\x12\xea\x7d\x28\x02\xff\xed\x41\x1a\xf5\x38\xd6\x45\x27\x5b\xf7\x93\xda\x7d\xf0\x2a\xf5\x23\x82\x7d\x06\x72\x22\xf2\x4d\xe6\xbf\x8d\xf9\x97\xd5\xdf\x62\x1c\x3c\x3d\xbe\x07\xb9\x8b\x78\xf9\x0e\xe4\x3e\xf0\x1d\x85\x0f\x9a\xe7\xc9\x0f\x38\x8f\xaa\xb6\xbf\xc3\x63\x9c\x22\xca\x3e\xeb\xad\x1f\x63\xfa\x9d\x4d\xe8\x3b\xf5\xf6\x9a\xb4\x1b\x61\xfa\xbb\x5a\xfd\xfa\xbc\xf3\x9d\x77\xc9\x3b\xf7\x9b\xe4\x9d\x3b\x0d\xf1\x98\x1d\x4f\x1e\xa3\xe5\xd5\xbf\x0b\xbf\xb8\x4a\x7e\x62\x7e\x0b\xfe\xf1\x3c\xf9\x4f\x39\x45\xfa\xe3\x57\x48\x9a\xaf\xc1\x6f\x5e\x44\xfc\x59\xc3\x39\x76\x81\xfc\x6f\x66\x15\x7e\x34\x36\x0f\xde\xba\x0f\xde\xfa\x22\xe3\xb5\x9f\x27\x9e\x6a\xfc\x22\xf9\xf1\x70\x8c\xec\xfd\x06\xec\xd5\xf6\x83\x9f\xa7\x7e\xfc\x12\xa5\x6d\x9e\x4a\xe3\x54\x7e\x98\xe3\xc7\xa8\xbe\xb1\x08\xe2\x64\x07\xdb\x0f\x47\xb4\x71\xc0\xda\x6f\xac\xb4\x73\xdc\x86\x34\xbc\x76\xa2\x95\x36\x4a\x6b\x7c\x4e\x1b\x58\xa7\x90\x31\xb9\x6f\xd9\xfb\xce\x4f\x3f\x4c\x1b\xde\x44\x98\x78\x94\xd5\xcf\x7a\x7a\x9f\x7e\x98\x26\x72\xee\x00\xe5\xa7\x9f\xa7\xf9\xb1\xe2\x41\x7a\xe1\x11\xb4\x9f\xfa\x7b\xdb\xa0\xf6\x65\xe3\x5d\xc0\x3b\x18\xde\x0d\x3c\x86\xf5\xfd\x61\x17\x3f\xe0\xf1\xa9\x47\x1b\x9f\xd0\x7f\x87\xde\x64\x03\x7a\xcd\xf0\xa8\x88\xe4\x33\x23\x6c\xfe\x68\x5f\x30\x4f\xd3\x3e\x60\x4e\xe7\x5c\xed\xd8\xf6\xe3\x1d\xb8\x7f\x89\xb6\x52\xc0\x37\xe1\xd7\x13\xc6\x75\xc9\x27\xca\xe7\xf5\xf3\x52\x3d\x7f\x84\x65\xb9\x65\x59\x0f\xe7\x57\x59\xec\x8b\x8d\xdf\x7f\x11\xb1\x31\x91\x1f\x35\xda\xa4\xfd\x7b\xaf\xf7\x25\xcc\xcf\x6f\xa1\x7e\xda\xd7\xcb\x5f\xa4\x72\xba\xb8\xb0\xae\x89\x43\x33\x25\xb2\x3b\x61\x7c\xbf\x12\x50\x78\xbf\xca\x7b\xd2\x68\x5f\x1a\xfb\x49\x16\xfb\x46\x16\xfb\x86\xd5\x8f\x34\xf6\x19\xf3\x4a\xac\xe1\xf6\x28\x71\xea\x4a\x67\x5d\xbd\x3d\xad\x5e\x57\x5d\xbd\x1d\x5d\x1c\xbe\xd2\x53\x57\xef\xae\x56\x0f\xf1\x3b\xe6\x2e\x3f\xea\x8c\xdf\x5f\xb4\xe7\x8d\xf4\xac\xf8\x3d\xea\x19\xbf\x77\xb5\xf7\x06\x18\xff\xb1\x25\xc4\xd7\x3d\xc4\xd7\x57\x11\x7f\x31\x1f\xdd\x34\x6f\x33\x25\xeb\x7e\x67\x85\xca\x5f\xa7\x79\x49\x9f\x5c\xa5\x78\xdc\xf2\x09\x69\xcf\x7d\x6f\x40\x01\xd8\xbe\x37\xa0\xb8\x6d\xc7\xdd\x8f\x91\x9e\xeb\x7e\x96\xd6\x4d\x48\xd0\x79\xd8\xe9\xc7\x4b\xbe\x7e\xdc\x2f\xd3\xf6\x7a\xd0\xf3\x71\x9d\xdf\x48\x3e\x11\x54\xc7\xf7\x92\x6c\x83\x7d\x6f\x6d\x5e\xa3\xb8\xc2\xfb\x59\x1c\xb6\xcf\x4f\x86\xe3\x5e\x2c\x55\xfa\x63\xf8\xf1\xa7\x90\xb6\xfc\x3f\x87\xf4\xab\x48\x17\x90\xa6\xf1\x2e\x1f\xa6\x76\xdc\xc6\xfe\x91\xed\xa6\x7d\x71\x0e\xf1\xd8\x8e\xcb\xd8\x1f\x4b\xab\xa8\xe7\xf3\x88\xd3\x1b\x0a\xaf\x33\x4b\x37\x15\x7e\x57\x5e\x45\xff\x5b\xc8\xbf\xac\xfd\x28\x16\x50\xc7\xf5\x46\x48\x88\x21\x8c\xc3\x91\x06\xe7\x21\xe8\x38\x3f\xdb\x71\x2a\x40\x71\x0a\xe5\x6a\xe7\xd0\x7b\x8e\x33\xff\x55\x69\x53\xe6\xbb\xd1\xf3\xd8\xa8\x12\x8f\x9a\xe6\xb5\x57\x12\xda\x76\xeb\x78\xed\xa8\x8e\x1f\xfa\xe8\x73\x5e\xbb\xd4\x84\x7e\x5d\x5e\xeb\x63\xb7\x21\x5e\xdb\x40\x5c\xd4\xf2\xda\x06\xe2\xa2\x96\xd7\xfa\xc4\xc5\x9d\x86\xe2\x62\x93\xbc\xb6\x76\x7f\x49\x7e\x62\x5e\x87\x7f\xe0\x1c\x38\x1e\x85\xdf\x22\x5e\x16\x87\xc9\xbf\xcc\x55\xf0\x59\xeb\x3c\xba\x02\xff\xe9\xde\x42\xfc\x04\x9f\x8d\xff\x03\xad\xd7\x65\xf0\xd9\x36\x3a\xdf\x46\x43\x14\x07\xc6\x07\xa8\xfe\x68\xcb\x55\x99\xb6\xe3\x26\xb5\xc3\x8e\x9b\xdf\xa0\x38\xe4\x8a\x9b\x07\x64\xdc\x74\xae\xd3\x75\xdf\x75\xfa\x15\x17\x4f\xf0\x2a\x4f\xf1\xf5\xcb\x8c\x57\xe9\xef\x35\x74\xfe\xfb\xe3\x89\xaf\xaf\x2a\xf1\xd5\x44\x5c\x30\x57\xb0\xde\xbb\xd5\x73\xae\x15\x17\xcd\x15\xc4\x87\x6e\xf5\xde\xc5\x2c\x6d\x79\xc4\x5f\xba\xff\xe0\x3c\xbb\xfc\x00\xc9\x24\x5d\x9f\xca\x7b\x0a\x19\x9f\x21\xb3\x63\x2f\xd7\xe2\xb6\xe4\xdd\xf1\x57\x60\x67\x8d\xc5\xe7\xe5\x77\x1d\x9f\x13\x8e\xf8\x1c\x12\xd4\x3f\x8b\x0f\x73\xfe\x6b\xdf\xf7\x0d\xd5\xd2\x72\xfd\x44\xe0\xd7\x33\x4d\xf2\xe2\xda\x7d\x5c\x41\xf9\x2e\x3a\x61\xcc\x1a\x41\x79\x1e\xc4\xb9\x08\xdf\x9f\x6e\xc0\x4e\x71\x81\xc6\x3f\xbd\x40\xfe\x6f\x9d\x5f\xcb\xf8\xee\xa5\x5b\xaf\x9b\xda\x73\xb6\xb5\xce\x37\x3d\xd7\xf9\x2d\xcd\x3a\x2f\x2e\x90\x9f\x65\x17\x96\x5d\xfe\xef\xf7\x1d\xd8\xcd\xbf\x0f\x31\xfe\x8d\x7a\xe3\xcd\xd6\x4b\x0b\x23\x04\xdc\xae\xff\x59\xac\xd3\x51\x1a\x5f\x6b\xbf\xf4\x19\xa7\x65\xed\x7e\xb9\x8c\xfd\xf2\x3f\x18\x2f\x57\xd7\x6f\x1a\xf7\x91\xde\xbc\x7c\x44\xe5\xe5\xd6\xf7\x3c\x9f\xf6\x2c\xfa\x7d\xcf\xf3\xd1\xd3\xf2\x72\xeb\x5e\xc5\x47\x4f\xcb\xcb\xad\x7b\x15\x1f\x3d\x2d\x2f\xb7\xee\x55\x8e\xb8\xcb\x8f\x38\xf7\x9f\xaf\xd9\xf3\xa9\xfa\xe5\x48\x93\xbc\x1c\xe3\x8f\xfb\x54\x9b\x97\xaf\x32\x5e\xbe\xc6\x78\xf9\xef\x31\x5e\xfe\x3a\x78\x39\x2d\x50\x37\x2f\xa7\x03\xb5\xbd\xbf\x90\x5f\x5b\xfb\xcb\x84\x71\x8b\xda\xeb\xf0\xdf\xaa\x5f\x85\xc4\x5f\x8a\xf7\xc6\x0f\xff\x53\xb4\x35\xc0\xd3\xdd\xfb\x8b\x75\x0f\xb3\xf8\xee\x78\x9b\x75\xaf\xc7\xda\xad\xe3\x6d\x23\x7e\xf7\x82\x1a\x7d\xce\xdb\x16\x9b\xd0\x6f\xf8\x3e\x52\x63\xb7\xa9\xfb\x48\x1f\xbb\xbe\xf7\x91\x3e\x7a\xbe\xf7\x91\x9a\x75\xb3\xd3\xd0\xba\x69\x92\xb7\xad\xc2\x2f\xac\x77\x20\xd7\xac\xef\x15\x6b\xd8\xef\xe1\x27\xdd\xe0\x07\xa5\x5d\xc5\xdf\x66\x96\xe1\x37\x6d\xe4\x87\x33\xf8\x2e\x9e\x3d\xf9\x1d\x5a\x57\xaf\x81\xaf\xbd\xf8\x26\xc5\xf5\xe3\xd4\x9e\xf1\x4f\x92\x8c\x86\xe9\x5e\xa9\x8c\x7b\xfb\xf1\xc7\x2c\x3c\x23\xe5\x73\x60\x0d\x51\x41\x17\xb0\xcf\x85\x90\x0e\xd1\xc6\x6e\xc5\xfd\x89\x16\xfa\x17\x5f\xaf\x31\xb9\x5c\x1d\xf7\x82\x4f\xd2\x3d\xda\x44\xe0\xcb\x54\xbe\xee\x7d\xe0\x6f\xd6\xc6\x39\xe4\xb8\x1f\x3b\x8d\xfb\x41\xeb\x9e\xb0\xf8\xbc\xfd\x8e\x29\x28\xd7\x4d\x02\xe3\x35\xc4\x78\xcc\x09\xc6\x03\xd5\xef\x06\xa9\xd2\xeb\x58\x77\xd3\x48\xff\x19\xd2\x67\x14\x1e\xe6\xe6\x59\xc4\xd3\x62\x61\xb5\xfd\x56\xb9\x24\xbe\xe3\xcd\xa1\xbc\xad\x37\xcb\xda\x57\x70\xf1\xd0\x49\xcd\x7d\xac\x59\xc2\x39\x7c\x05\xfc\x10\xef\x2f\xca\xe0\xe1\x73\xf8\x7e\x54\xa6\x65\xe0\xfa\x7e\x5f\xc6\x79\x20\x2a\xb0\x0f\x5a\xe9\x16\x22\x60\x65\xfa\x0c\x57\x9b\x7f\xbb\xfc\x61\x25\x3f\x99\x13\xaa\xbe\x64\x69\x2a\x0f\xac\xc6\x23\xeb\xfb\x10\xe7\x81\xd6\xbd\x3e\x3f\xaf\x5b\xfd\xf3\xec\xd7\x61\xd5\x6e\x7a\xd8\xda\x7f\x88\xa7\xde\x0e\x61\x7c\xf1\xfe\xca\x7b\xfc\xaf\xb2\xf1\x7f\xd5\xc5\x7f\x16\x7d\xcf\x21\x1f\x16\xbc\xfc\xb2\x6f\xf9\x47\x6b\xe9\xf7\xc7\x9f\x97\x99\x3f\xaf\x2a\xfe\x9c\x02\x9f\xf7\xf2\x67\xf7\xbd\xcd\x2c\x5b\x27\x8d\xf9\xeb\xbd\xfa\x03\xbf\x7f\x79\xbf\xc6\xcf\x3a\xdf\x98\x2b\xd8\xcf\xbb\x73\xec\xfc\xc3\xcf\x6d\xea\x77\x70\xef\x78\x71\xd9\xd1\x7f\x47\xbc\xc0\xbe\x91\xc4\x77\xfd\x39\xec\xef\xb7\x21\xb3\xc3\x0b\xac\xfd\x2f\xfd\xd8\xc6\x3f\x21\xc7\xf8\xef\x95\xf1\xb0\xdf\x27\xe0\x3d\xcc\x11\xf5\x3d\x86\xf5\x9e\x82\x9f\xcf\xa2\xad\x03\xae\xf7\x15\xba\xf7\x1f\xee\xf3\xd9\x51\x76\x3e\xfb\x10\x9d\xcf\x16\x70\xae\x46\xfd\xd9\x05\xbc\xdf\x59\x78\x1b\x7c\xa9\xfe\xfe\xff\x76\x13\xbc\x21\x8c\xf7\x0a\xf5\xde\xd1\x15\x17\xc0\x63\x17\xf0\x1e\xa6\x81\xf3\xa1\x9e\xf7\x58\x7c\x62\xd7\x93\x4f\xe8\xce\x19\xc5\x85\x25\x8c\xc3\x94\x2b\x8e\xf9\xdf\x3f\xd7\x3b\x1f\xa2\xde\x78\xb3\xf5\x7a\x9d\x0f\xc7\x11\x0f\x7f\x00\xbc\x3e\x2f\x9f\xaa\xf6\x37\x82\xef\x68\x2e\x7e\x3e\x05\x7e\xfe\xef\x95\x80\x12\x1f\xf0\xae\x03\xdf\x3b\x39\xdf\x28\xc6\x13\x0a\x4f\x4f\xe3\x5d\xae\x7d\xce\xc4\x79\x3f\xfe\x26\xe4\x06\xa4\xc5\x0b\x6e\x42\x5a\xf7\xe5\xd6\xf7\xa1\xd7\x11\x27\x71\x0e\x8a\xd3\xbb\x11\xfb\xbb\xe6\xeb\xf0\x8f\xfa\xe7\xd0\x0d\x9f\x73\xa8\x8e\xa7\xbe\xe9\x7c\x87\xc6\x78\xaa\xfd\xce\x0d\xf7\x7d\x25\x5a\x2f\x76\x7c\xff\x6b\x57\x3c\x59\xd7\xf2\x0f\x35\xae\x59\xef\x84\xe7\x20\xa3\x81\x6f\x4b\xdc\x19\x5f\xaa\x43\x7a\xf4\x30\xbd\xf3\x4d\x95\x36\x15\x7d\xfb\x3c\xf7\x86\xd0\xcd\x13\xc5\x1d\x43\x1c\x3d\xfc\xfb\xd4\x5f\x47\x3c\x5b\x92\xf1\x6c\x52\x1b\xcf\xcc\x6b\x88\x13\xd8\x4f\x42\x62\xe5\x3d\xf6\xb7\x6f\xca\xf3\xe0\x7b\xe7\x6f\xd6\xb9\xef\x36\xe4\x36\xe4\x2d\xc8\x2d\xc5\x9f\xde\x3b\xff\x7c\xcb\xc3\x3f\xeb\x9f\xfb\xb6\xee\xf1\xdc\xb7\xdd\xa4\x3e\x3f\xef\x6e\xf8\xe8\x5b\xeb\x23\xdc\xea\x3e\xe7\x6e\xfa\x9c\xe7\xec\x75\xb2\xe3\xb1\x4e\xfe\xb5\xc1\x75\xb2\x09\x7e\x40\xf3\x32\x11\xc0\x3b\x02\xf4\xa7\xfe\x79\xa9\x15\x7e\x8c\x77\x00\xab\x34\xff\x13\x2d\xf4\x60\xab\x7c\x0c\xf5\xe0\xfd\x97\xf5\xfe\x8c\xa2\x8a\xe3\x1c\x15\xea\xa9\xf5\x8f\xfc\x14\xef\xed\x5e\x83\x3f\xbe\x68\xbf\x7b\x0e\x38\xbe\xf3\xa5\x9f\x2f\x30\x7e\xa4\xf2\x9b\x54\xc9\xf2\xc3\xcb\x48\x5b\x7e\xfb\x12\xd2\xd6\x3d\xdc\xa2\xc2\x27\xb3\xf1\x97\x99\xff\xbd\xe2\x1a\xcf\x79\xed\x78\x5e\xae\x13\x77\xe8\x00\xeb\x8e\x3b\x74\xd1\x9d\x2a\x2d\x7a\xc4\x1d\x8a\xa7\xde\x71\xe7\xa7\x68\xbc\x1d\x71\x67\xca\x27\xee\x94\xf1\xf7\x33\x76\xdc\xa1\x09\x1f\xc7\xfb\x9d\xa8\x41\x0d\x18\xc7\xdf\x3d\x45\x83\x1d\xc2\x39\x5e\xee\xf6\xdd\x57\xa7\x7d\x11\x57\xfb\x1a\x8d\x8b\x09\x1f\x9e\xdd\xe2\xf8\x4f\xb4\x78\x63\x06\xf8\x5e\xa4\x01\xac\xc3\xf2\x4f\x07\xd6\xa5\xc1\xaa\x7a\x97\x1d\x7f\x2f\xf6\xc9\xc4\x33\xe2\x7f\x1d\x6f\x5b\x75\xbf\x45\x49\x37\x42\x22\x77\x40\xc5\x63\xc0\x13\x61\x15\xff\x83\x00\xe1\x91\x88\x8a\x9f\x03\x3e\x1f\x54\xf1\xfb\x80\xaf\xb3\x7a\xfe\xcd\x20\x7c\x9a\xd5\xf3\xe7\xc0\x17\x59\x7b\x2e\xa2\x3d\x1b\xac\x7c\x02\xf8\x16\xc3\x7b\x2c\x9c\xb5\xe7\x6f\x51\xbf\x68\x55\xf1\xdf\x01\xde\xc1\xf0\xeb\xb2\xfd\xad\xae\xf6\xb7\x00\xdf\x65\xf8\x77\x0d\xc2\x2f\xb2\xf6\x7c\x1b\xf8\x3a\xc3\xd7\x83\x84\xf3\x7e\xfd\x05\xca\xef\xb0\xf6\x77\xc8\xf4\x41\x17\x7e\x3a\x40\xf8\x74\x48\xc5\xef\x1a\x84\x2f\x31\xfc\x1f\x81\xaf\x31\xfc\x0f\x81\xdf\x64\xf8\xd7\x51\x3f\x1f\x9f\x24\xf0\x11\x86\xff\x08\xf8\x9a\x0a\x8b\x49\xe0\xfc\x8f\x1a\xbf\x0f\xbb\x09\x86\xdf\x94\xfd\x3c\x24\x46\x5b\x54\xfc\x32\xf0\xa5\x36\x15\x9f\x02\xbe\xcb\xf0\x11\xe0\x1b\xac\xfe\x08\xf0\x2d\x86\xff\x76\x80\xf0\x29\x66\x77\x0d\xe5\x6f\xb2\xfa\xe7\x2d\x9c\xf9\x43\x97\xd5\x1e\x86\x7f\x05\xf5\xc7\xd8\xbc\x2f\xa3\xfc\x10\xab\x3f\x07\xbc\xeb\x3e\x15\x1f\x05\xde\xc1\xf0\x4e\xe0\x31\x86\xff\x10\x76\x73\xac\xbf\x5f\x00\xbe\xcd\xf0\x49\x59\x4f\xbb\x18\x65\xf1\x70\x08\xf8\x24\xc3\x05\xf0\x2d\x36\x6e\x6f\x1b\x84\x5f\x64\xe3\xf0\x2d\xe0\x9b\x0c\xbf\x14\x80\x5d\xe6\x57\x4b\xa8\x7f\x87\xe1\xd3\xc0\x77\x19\x3e\x87\x7a\xf6\x59\xbf\x7e\x05\xf8\x14\x6b\xff\x25\xb9\xdf\xc6\x04\xff\x3d\x2a\xf1\x23\x2e\xfc\xef\xe4\x7e\x7b\xbf\x0b\x3f\x2a\xf1\x07\x5c\xf8\xaf\xc9\x7a\x0e\xb9\xf0\x8f\x48\xfc\xa0\x0b\xff\x8e\x8c\xff\x41\x17\x7e\x52\xe2\x61\x17\x1e\x96\x78\xbb\x0b\x5f\x93\x78\xc8\x85\x8f\x48\xbc\xd5\x85\xff\xa9\x6c\xff\x4f\xb8\xf0\x23\x12\x3f\xec\xc2\xa3\xb2\xfd\x0f\xb9\xf0\xb7\x64\xf9\xa8\x0b\x7f\x52\xe2\x0f\xba\xf0\x51\xc8\xea\x74\x7d\x54\x10\x17\x70\xa6\x73\x2c\xbd\xee\x48\x7f\xa2\xea\xaf\x07\xec\xf4\x53\x42\x88\xbd\x88\x9a\xef\xac\x7f\x98\xd5\x3f\xcc\xea\xaf\xa6\x97\x59\xfd\x9b\x41\x35\x3d\x1d\x51\xed\x2d\x3b\xd2\x4f\x33\x7b\xd5\xf2\x5b\x2c\xdd\x65\xa8\xe9\xbd\xa0\x5a\xdf\x68\xc8\x4e\x3f\x51\x8d\x33\x21\x35\xbf\xb3\x55\xb5\x97\x60\x69\x2b\x0e\x1a\xf8\x93\xf1\x04\xb3\x3f\xc2\xec\x2f\xb1\xf4\x4e\xab\x6a\x7f\xa9\x4d\xb5\xbf\xd9\xa6\xda\xdb\x3b\xa8\x96\xcf\x1d\x52\xed\x4f\xf2\xf1\x64\xf6\x3a\x03\x6a\x7a\xad\x45\xad\xaf\x93\xb5\x67\xa3\x55\xad\x5f\x3c\x5e\xc8\xcc\x17\x44\x76\x36\x53\xc8\xcd\x9e\xfb\x4c\x26\x99\x9c\x39\x9b\x29\x24\xd3\xf9\x6c\x32\x95\x4e\x67\x72\x05\xf1\xf8\x6c\xe6\x4c\x2d\xfb\x23\x3c\xd7\xa1\x58\x48\xe7\x92\x2f\x0c\x26\xd3\xe7\xce\x9e\xcd\xa4\x0b\x22\xab\x87\xd5\xea\x74\x99\xda\x1c\x6e\x67\x40\x6f\x67\xc0\xcf\xce\x80\xa7\x1d\x3b\xe7\x73\xa9\x5c\xbe\x8a\x15\x66\x53\xe9\xcc\x6c\x32\x5f\x48\x15\x2e\xe4\x45\xf2\x85\xcc\x6c\x7e\xe6\xdc\x59\xc5\x58\x3e\x53\x90\xf9\x19\x5e\x9d\x9d\xe1\x2c\x9e\x3e\x73\x2e\xef\x2a\x4a\x60\xf2\xcc\x4c\x3a\x73\xb6\x9a\x9b\x2f\xcc\x16\x52\x9f\x11\x8f\xe7\xcd\xcf\x55\xe5\x33\x4f\x3c\xd1\x9b\xec\xfb\x68\x55\x0e\x26\x7b\xa5\x1c\x80\xec\x87\xec\xad\xa5\x87\x50\x7c\x08\xc5\x86\x50\x0c\x78\x2f\xf0\xe3\xa8\xed\x38\x8a\x1d\x47\xb1\xe3\x28\x76\xbc\x36\x06\xc9\xcc\x0b\x99\xb3\x85\xe4\x4c\xee\x85\x41\xc2\x30\x48\xf9\x73\xe9\xac\x03\x2d\x5c\xc8\x9d\xc9\xe4\x66\x3e\x4b\x90\xac\x7c\x90\xea\x86\xe8\x83\xec\x1d\x84\x09\x94\x3a\x56\x15\xc7\x48\x0c\x26\xfb\x90\x24\x39\x50\x4b\xf7\x1e\x43\x03\x8f\x41\xfb\x98\xa6\x81\x03\xda\x06\x0e\xb8\x1b\x38\x40\x95\x0e\x90\x8d\x01\x8c\x05\xd0\x5e\xc0\x24\x7b\x6b\x78\x7f\x3f\x9a\xd6\x8f\x21\xee\x87\x1e\x70\x4b\xf6\xf7\x21\xbf\x0f\xf9\x7d\xc8\x47\xba\xbf\x17\xe5\x20\xfb\x7a\x51\x1e\xe9\x5e\xa4\x49\x0e\x26\xfb\x7b\x50\x1e\xb2\xaf\x87\x86\xa2\x0f\xe9\xde\x1e\x71\xaf\xbf\xaf\xe2\xfb\x05\xff\x8d\xd0\x73\x64\xb1\xc1\x32\x19\x2d\xa8\xfd\xff\x6d\x1c\xe0\xfa\x1e\xf6\x18\xcd\x11\xef\xd4\xd1\x9f\x67\x38\xa3\x7f\xe2\x8e\x70\x1d\x4d\xe8\x47\xcf\xa7\x05\x3e\x23\x8a\x38\xa8\x96\xa5\x6f\xe1\xdf\xf5\xb0\x7f\x13\xb2\xb3\xd5\xdf\xfe\x3f\x7b\xd8\xef\x80\xfd\x84\xc3\x7e\x48\x63\xff\x65\x0f\xfb\xdb\xa8\xb4\x5e\xff\xbf\xea\x61\x7f\x4a\xd3\xff\xb0\xc6\xfe\x05\x0f\xfb\x09\xec\x53\xfc\x9c\xc8\xed\x9f\xf7\xb0\x9f\x83\xfd\x29\x87\xfd\x56\x8d\xfd\x5f\x36\xf4\xf6\x3b\x41\x11\x3b\x0e\xfa\xdb\x7f\xca\xd0\xdb\xdf\x82\xfd\x45\x87\xfd\x83\x1a\xfb\x05\x0f\xfb\x3d\x3f\x43\x72\xe9\x90\xbf\xfd\x9c\x87\xfd\xa9\x8f\x93\xbc\xe8\xb0\x7f\x48\x63\xff\x51\x8f\xf1\xdf\xfc\x10\xc9\xfd\x3a\xfe\xf7\xb3\x1e\xe3\xbf\x03\xfb\xce\xf1\x6f\xd7\xd8\xff\x93\x00\xd9\xe7\x31\x60\x03\xf7\x7e\x9c\x91\xf3\xf5\xfb\x80\x87\xfe\xad\x06\xf5\xff\xca\x43\x7f\xb7\x41\xfd\x2e\x0f\xfd\xbb\x0d\xea\xff\x8b\x87\x7e\xc7\x60\x63\xfa\x1f\xf7\xd0\x7f\xa4\x41\xfd\x0e\x43\xaf\x3f\xd4\xa0\xfe\x97\x3c\xf4\x9f\x19\xd4\x97\xe7\xf1\xfb\x31\x0f\xfd\x84\x87\x3e\x4f\x7f\x03\xf7\xb9\xfc\x37\x09\xfd\x35\xc7\xf9\xe2\xb8\xc3\xff\xac\x13\xe3\xff\x05\x00\x00\xff\xff\x10\xfc\xc7\xa6\xc0\x49\x00\x00")

func tcptracerEbpfOBytes() ([]byte, error) {
	return bindataRead(
		_tcptracerEbpfO,
		"tcptracer-ebpf.o",
	)
}

func tcptracerEbpfO() (*asset, error) {
	bytes, err := tcptracerEbpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tcptracer-ebpf.o", size: 18880, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tcptracer-ebpf.o": tcptracerEbpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tcptracer-ebpf.o": &bintree{tcptracerEbpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

