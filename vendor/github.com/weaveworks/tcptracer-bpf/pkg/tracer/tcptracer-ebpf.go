// Code generated by go-bindata.
// sources:
// ../dist/tcptracer-ebpf.o
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tcptracerEbpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5c\x7d\x6c\x5c\xd9\x55\xbf\x6f\xec\xc9\x8c\x9d\x4d\x6d\x92\xce\xc6\x99\x52\xe1\x52\xd8\x98\x29\xbb\xeb\xaf\x24\x5e\xab\xa5\xd6\x96\xec\x1a\x6b\x25\x5b\x51\x4c\x4c\xd4\x65\x3c\x9d\x4e\x62\x67\xd2\x64\x32\x9e\xc4\x7e\x3b\x85\x46\x94\xdd\x46\xd6\x52\x9c\xed\x02\x66\x15\x81\xc7\x71\x88\x81\x54\x6b\xc4\x47\xfc\x07\x68\xac\x6a\x2b\x2c\xb4\x02\x0b\x45\xc8\x08\x83\x2c\x14\x55\x6e\x55\x55\x86\xae\x82\x59\x22\x06\xcd\x3d\xbf\x37\xef\xdd\xf3\xee\x7b\x33\x4e\xd2\x32\x52\xf6\xec\x39\xf7\xde\x73\xce\xbd\xf7\xdc\x73\x7f\xf7\xbe\x9b\x7c\xe5\xf8\x2b\x2f\x05\x0c\x43\x58\x3f\x03\x7f\xf8\x6f\xf5\x45\xfb\xff\xfb\xf0\xdf\x8f\x09\x43\x14\x9f\x26\xd9\xeb\x42\x88\x8f\x08\x21\xf2\x8d\xdb\xa5\x32\x6f\x26\x32\x52\x9e\x8f\xee\x48\xbe\x38\x4f\xf5\x42\x01\x21\xb6\x4b\xa5\x52\xf1\x26\xf8\x3a\x21\x76\x4a\xa5\x52\x0b\x33\x7a\xb7\xde\xd6\x1b\x28\xf3\x90\xff\x0e\xa8\x79\x70\x88\xd9\xed\x97\x76\xee\x42\x4f\x3e\xda\xe7\xb2\xdb\xaf\xb1\xf3\x3a\xfa\x1b\x11\x07\x65\x89\xb9\x87\xe4\xb5\xb4\xab\x13\x42\x9c\x0d\x09\xd1\x2a\x84\x98\x04\x1d\x0e\x7d\xc4\xe0\xed\xfb\x7c\xec\x16\x43\xc4\x47\x42\x21\xb2\x7f\x09\xbc\x11\x24\x7e\x9e\xf7\xab\x9d\xc6\x77\x02\xf5\xea\x46\xa4\x1f\xc3\x75\x25\xa9\xcf\xbc\x14\x26\xff\x0f\x50\xf9\xbb\x9f\x24\xda\x12\x10\xa2\x54\x2a\x95\x2c\xfb\xcf\x7e\xf2\xbf\x69\x9c\x1b\xa0\xf7\x9d\xad\x12\xd1\x4d\xd0\x75\xd0\x35\xd0\x55\xd0\x15\xd0\x65\xd0\x25\xd0\x45\xd0\x39\xd0\x59\xd0\x19\xd0\x6b\xa0\x57\x41\xa7\x40\x33\xa0\x63\xd4\xcf\x00\xcd\x77\x3e\x46\x7c\x3e\x4a\xe5\xe6\xa5\x66\xf4\x9f\xda\x99\xd9\x16\xe2\x63\x6d\x54\x2f\x76\x15\xf2\x56\xc8\x5b\x21\x27\xbb\x66\xa6\x8d\xe4\x8d\xe4\x8f\x79\xb9\x9d\xf8\xd3\xe4\xa7\x99\xeb\xa1\xb8\x9a\xa2\xe8\xce\x4f\xa3\x3f\x03\xd4\x1f\x73\xaa\x9f\xca\xb3\x43\xd0\x8f\xfe\x4f\x2f\x29\xe3\x92\xc8\xe6\x64\x79\x32\xb6\x01\x7f\xa6\xc0\xd3\xb8\x16\x7f\x8e\xc6\x7b\xb2\x81\xe2\x25\xfd\xce\x7d\x29\x9f\x0c\x08\x51\xf6\x28\x1d\xfb\x0e\xf4\x64\xd0\x8e\xe6\x61\x3c\x7b\x55\xf2\xe9\xd8\x16\xca\xbf\x28\xf9\xb3\x01\xd2\x93\x30\x47\x25\x3f\xf8\x16\xe9\x4f\x98\x63\x44\x27\xce\x53\xbd\x3a\xaa\x37\xf8\x0d\xcc\x77\x2f\xe6\x35\x46\xf3\x9a\x32\x92\x72\xdc\x23\xc6\xaf\x23\xfe\xde\xa6\x75\x61\x18\x52\x1e\x14\x7f\x2e\x9c\x71\x98\x8e\x9e\x90\xed\x9a\xde\x20\xbe\x58\x20\x5a\x8e\xe2\x13\xa5\x52\xc9\x9a\xc7\x62\x92\xe4\xe5\x78\x2f\x2f\xe9\xf1\x02\xb5\x4b\x47\xa9\x1f\x41\x31\x47\xfd\x8c\xf6\x94\x9c\xf1\x9d\x8c\x8e\x80\x3e\x44\xfd\x93\xa0\x0f\x50\x6f\x0c\xe5\x3b\x88\x0f\x8a\x07\xcb\x5e\xd3\x01\xb7\x5f\x23\xf0\xab\xde\xe1\x8f\x79\xa9\xb5\x6a\xbb\x87\xda\x76\x6d\x55\xdb\x9d\x74\x8c\x83\xdd\xae\xbd\x6a\xbb\x07\xda\x76\x14\x9f\x4d\x4f\xbb\xeb\x8f\xa1\x7e\x58\x33\xde\xe6\x25\x8a\x67\xf3\x26\x8d\x97\xce\xde\x8e\xa6\x7f\x89\x05\x8c\xff\x00\xcd\x47\xe2\x26\xcd\x43\xb2\xb7\x9b\xe2\x71\x1e\xf3\x11\xa3\x79\x1b\x2f\x3c\xc0\xfc\xf4\x52\xfd\x5b\x34\x2f\xc9\xd3\x9f\x96\x34\x52\x9f\x56\xe2\x70\x12\x34\x52\x47\x71\x7a\x4a\xe6\x27\x21\x22\x81\x33\xc4\x1b\xe0\x0d\x8a\x73\xb3\xd0\xaf\xcc\xbb\x9d\x0f\xa7\x94\x3c\xe1\xec\x57\x06\xfd\x6a\x46\xbf\x9a\x59\x5e\x6e\x67\xfb\xd0\x98\x26\x4f\x07\xc5\x09\x49\x23\xc6\x61\x99\x67\x23\xc6\x67\xe4\xf8\x94\xd7\x45\x50\x96\x53\x3e\xb0\xfc\x49\x22\x4e\xf3\x88\xdf\xa6\x97\xbc\xe3\xd0\x7f\xbe\x46\x3c\xe7\xeb\xa4\x66\xbe\xce\x0a\x8c\x2b\x68\xb9\x1f\xff\xe9\xc8\xf7\xaf\x36\x77\x54\xfc\x34\xa4\x7f\x2b\x58\x7f\xed\xcc\x7f\x9a\x67\xb3\x40\x79\x55\x17\x6f\xce\xf5\xc0\xfd\x4f\x14\x10\x27\xd1\x0d\xe8\xff\x19\x45\xbf\xb5\x7e\x9b\xf6\xb8\xf5\x3e\xf0\xcd\x1b\x56\x7c\xdd\x87\xde\x43\xcc\x6f\xe4\x81\x42\xab\xa7\xdf\x3b\xbe\x7e\x23\x5e\xa3\x9b\xd0\xbf\x8f\xf9\x7d\x86\xf4\xfe\xb2\x5b\xef\x19\x5f\xbf\xcf\xc0\xef\xef\x40\x6f\x40\x96\x27\x0a\x27\x61\x6f\xdd\x85\x53\x6a\x89\xcb\x6a\xf8\xe8\xff\x0d\x97\xb5\x3c\x59\x5c\x56\x44\x9c\x44\xf6\x10\x5e\xa9\x15\x97\x99\x67\x84\xab\x7e\x6d\x38\xec\xfb\xd4\x8f\x0a\x0e\xfb\x1e\xf1\xc8\x3f\x77\x03\xe8\x47\x0c\xe3\x99\x45\xbd\xc0\xe7\x09\x87\x05\xee\x13\x0e\xcb\x02\x87\x01\x7f\xbd\x8b\x75\xdc\x62\x30\x1c\x76\xe0\xdf\x84\x3a\x3e\xd8\x97\xa3\xc0\x5b\x58\xa7\xf9\x28\xf0\x46\x14\x78\x23\x0a\x7c\x12\x05\xde\x8a\x02\x6f\x45\x81\xb7\xa2\xc0\x5b\x51\xe0\x2d\x96\x27\xad\x3c\x9a\x8f\x8e\x2a\xf9\x2a\x1f\x1d\xa2\x7e\xd6\x01\x87\xf5\x0e\x01\x27\x8c\xa0\xbf\x84\xc3\xcc\x09\xe0\xaf\x5e\xe8\x89\x8d\x02\x97\xd2\x7e\x6a\xe6\x80\xb7\x06\x60\xb7\x17\x38\x6e\xa2\x1d\xe5\x3d\x28\x87\x9f\xbd\xc0\x6f\x13\xc8\x7f\xb9\x7e\x94\xa3\x5f\xbd\xc0\x6d\x13\xc0\x5f\xbd\x73\xca\x38\x24\x72\xc0\x5d\x03\xef\x01\xcf\x01\x77\x0d\xd0\x38\x16\x8f\xd3\xf8\x4e\x06\x81\xbb\x4e\xbf\x4f\xb8\xab\x1e\xb8\x6b\xe0\xef\xa1\x07\xb8\x6b\x80\xc6\x7d\x3c\x07\xdc\x35\xb0\x86\x72\xe0\xa9\x7a\xe0\xae\xcb\xb4\x7f\x0d\x9e\xc4\xfc\x0d\x2c\xa3\x1e\xe1\xb1\xc4\x65\xe0\x34\xd8\x1d\x84\x1f\xf9\xd3\xd6\x3c\x02\xbf\x46\x29\x6f\x0d\x07\x6e\x88\x72\xc8\x17\x6f\x53\xbd\x50\x48\x88\xa5\x52\xa9\xd4\x74\x94\x78\x67\xde\x69\x75\xec\x6f\xae\x7d\x04\xf9\x3b\x7f\x30\x8c\xf8\x05\x1e\x3e\x08\x3d\x3e\xeb\x7e\x48\xbb\x0f\x7e\x8d\xfa\x11\xc6\x3e\x03\x3a\x1c\x7e\x83\xc5\x6f\x6d\xf1\x65\xf5\x37\x1f\xdd\x06\xc5\xf9\x03\xf9\x37\x1d\xfd\x10\x74\x07\xf2\x75\x05\x0f\x9a\x97\x28\x0e\x38\x8e\x2a\xfb\xdf\xec\x31\x4e\x61\x65\x9f\xf5\x6e\xdf\xc2\xda\x6f\xef\xa2\xbd\xb3\xdd\xd6\x2e\xed\x86\x59\xfb\x4d\x6d\xfb\xea\xb8\xf3\xc3\x47\xc4\x9d\x3b\xbb\xc4\x9d\xeb\x35\xe1\x98\x75\x4f\x1c\xa3\xc5\xd5\x7f\x8c\xb8\x78\x87\xe2\xc4\x5c\x44\x7c\x4c\x23\xff\xdc\x46\x9c\xbc\x86\x7c\xf3\x47\x38\xaf\x9e\x1b\x03\x2e\x45\xdc\xc4\x32\xc0\xa5\x3b\x88\xa3\x2c\xc3\xb1\x39\xca\x0b\x5f\x25\x7f\xac\x73\x51\xa4\xee\xe7\x95\x71\x1a\xac\x9c\xb3\xe9\xe0\x66\xe3\xd4\xc3\xc4\x57\x70\xea\xcf\x4a\x9e\x9f\xd3\xf9\xfa\xb6\x71\x6c\xab\x0b\xaf\xb6\x69\xf0\xea\x70\x43\x50\x96\xf3\x75\x47\xeb\xd3\xde\x47\x3e\xde\x42\x1b\xe5\x70\xe8\x29\xaa\xbf\x07\xf5\xf7\xe8\xeb\xbf\xfa\x34\x6d\x78\xce\x3c\x30\xc4\xf2\x40\xab\x36\x0f\xec\x79\xa4\x76\xbb\xc5\x2b\x65\x1a\x96\xf8\xa1\x8f\xe1\x07\x8a\x27\xf3\x2c\xe5\x5d\x73\x2c\xe3\xf2\x67\xdd\x6f\x9f\xc7\x7d\x47\xa4\xe1\x57\xe8\x7e\xe5\x3a\xf1\xc3\xc6\x29\xa3\xbc\x7f\x17\xb1\xef\x9f\x35\x30\x7e\xa0\x65\xbc\x1f\x92\xf5\x4e\xc8\xdb\x32\xdb\x9f\x7e\xc4\xd7\xd2\xae\x70\x4d\x04\x38\xd0\x44\x79\xc4\xd8\x27\xf1\xc3\xe3\xeb\xad\xc3\x3c\x09\xa6\xff\xb7\x64\x49\x50\xf4\x52\xbf\x0d\xda\x5f\xad\xf8\xd7\xad\xcf\x25\x4d\x3e\x18\x2f\x90\x3f\xc3\xc6\xf7\x4a\x01\x05\x7f\xab\x38\x24\x09\xbf\x93\xc8\xef\xe9\x4a\x5e\x7f\x58\x72\xf6\x2f\x89\xbc\x6f\x5e\x6f\xa9\xd9\x1f\x25\x5f\x5c\x6f\xad\xda\x6e\x5b\xdb\xae\xad\x6a\xbb\x4d\x5d\x3e\xbc\xde\x5e\xb5\xdd\x43\x6d\x3b\xe4\xd1\x16\x77\xfd\x7e\x67\x1e\xfd\xaa\x3d\x9f\xd4\xce\xca\xa3\xfd\x9e\x79\x74\x4b\x7b\x7e\xc7\xf8\x03\x3f\x25\x6e\x6e\x23\xef\xdd\x40\x9e\xc4\x7c\xc4\xe6\x90\x27\xad\x7b\x96\x79\xaa\x7f\x8b\xe6\x25\x79\x7a\x41\xd2\x48\xfd\x0f\xa5\x3d\xf7\xf9\x7d\x5b\xca\xed\xbc\xf8\x03\xe2\x2b\x79\x91\xf0\xb4\xfb\x9e\x34\x28\xd7\x93\x33\xae\x67\x7d\xf0\x7c\x2d\xf5\x28\xfe\x39\x9e\xd6\xe3\x67\x5d\x5c\xc9\x7d\xbf\x4e\x1d\xff\xd7\xb1\x96\xac\x73\x8c\x79\x93\xf2\x11\x1f\x07\x0b\x27\x5b\xe7\x6b\xeb\xfe\x2a\x51\xf8\x0b\xc4\xf9\xe7\xc1\x5b\xeb\x23\x03\xfe\x06\xf8\x1c\x78\x9a\x8f\xe2\x7e\xf2\x63\x03\xfb\x41\x3a\x46\x38\xba\x9c\x8f\xca\xfc\x06\x68\x3a\xfa\x1a\xda\x2d\x40\xcf\x97\xb1\xcf\xac\x28\x38\xcc\x2c\x2c\x2b\x78\xac\xb8\x80\xfe\xd7\x53\xfc\x15\x13\xc4\xb7\x04\xd4\x71\xbd\x1b\x14\xa2\x07\xe3\x70\xa8\x86\x79\x08\x8a\x6f\x52\xbc\x3e\x76\x7e\xb9\x25\x1a\x1f\xe9\x5c\xd4\xcf\xce\x43\x2a\xbe\x74\xe3\xca\x4d\x15\x57\x5e\x1f\xd2\xfa\xad\xc3\x95\xfd\x3a\x7c\xe6\xd3\x9e\xe3\xca\xd9\x5d\xb4\xaf\x8a\x47\x7d\xec\x72\x5c\xa9\xc5\xa5\x35\xe4\x43\x2d\xae\xac\x21\x1f\x6a\x71\xa5\x4f\x3e\xdc\xac\x29\x1f\x6e\xee\x0e\x57\x56\x70\x17\xc5\x89\x79\x0b\xf1\x71\x9a\xe2\x67\x30\x22\xa0\x17\xf1\xd2\x4b\xf1\x65\x2e\x00\x6f\xe2\x1c\x69\xe3\xcb\x35\x86\x2f\xff\x91\xd6\xe1\x1c\xf0\x65\xe3\x3d\xca\x9b\xc1\x57\xa4\xde\xc1\x6e\xd2\x1f\xa9\x1f\x90\xd4\xce\x97\xb4\x4e\xec\x7c\x49\x17\x86\xb5\xe4\xcb\xa5\x1a\xf3\xa5\x57\x3d\xca\x97\x34\x0f\xf6\x3a\xd3\xdf\x2b\xe8\xe2\xf6\x47\x93\x2f\x6f\x28\xf9\xd2\x44\x3e\x30\xe7\xb1\xce\x63\xea\x3d\x86\x95\xe7\xcc\x79\xe4\x85\x98\x7a\xef\x61\x16\xd6\x3c\xf2\x29\xdd\x27\x50\xbe\xb3\x71\x71\xf1\xa3\x44\xe3\x74\x6d\x29\xef\x07\x64\xbe\x05\x4d\x0f\xbc\x55\xc9\xc3\xad\xd2\xcf\xb7\x61\x67\x91\xe5\xdb\xb9\x47\xce\xb7\x43\x1e\xf9\xd6\x6f\xbe\xbd\xf0\x34\xc7\xcd\xf6\xbd\x5c\x4f\x85\x97\xeb\x8c\xae\x09\x84\x39\xbe\x4b\x3c\x5d\xb9\x37\xcb\x29\xdf\x2f\x87\x8d\xac\xc4\xd3\xf9\x73\x74\x0e\x2a\xe2\x3b\xd1\x5d\xd8\xc9\x4f\xd3\x7c\x25\xa7\x69\x9d\x58\xe7\xcc\x22\xce\x61\xba\x75\xbd\xaa\x3d\x0f\x5b\xf9\x60\xd5\x33\x1f\xdc\xd3\xe4\x83\xfc\x34\xc5\x65\x7a\x7a\xce\x85\xaf\xfd\xee\x09\xab\xe3\x76\xe8\x8d\xee\x56\xaf\x17\x6e\x3f\x01\xdc\xde\xaf\xe2\x76\x9f\x71\x9a\xd3\xee\xab\x73\x1e\xb8\x5d\x5d\xef\x49\xdc\x1f\x7a\xe3\xf6\x3e\x15\xb7\x5b\xdf\xdd\x7c\xfc\x99\xf1\xfb\xee\xe6\xd3\x4e\x8b\xdb\xad\xfb\x0f\x9f\x76\x5a\xdc\x6e\xdd\x7f\xf8\xb4\xd3\xe2\x76\xeb\xfe\xe3\x90\xbb\x7e\x9f\x73\x9f\xfa\x86\x3d\x9f\x6a\x5c\xf6\xed\x12\xb7\x63\xfc\xf1\xdd\xd9\xc6\xed\x0b\x0c\xb7\x2f\x32\xdc\xfe\x27\x0c\xb7\xdf\x01\x6e\xa7\x05\xea\xc6\xed\x74\x20\xb7\xf7\x21\x8a\x6b\x6b\x1f\x1a\x36\xee\x91\xbf\x8e\xf8\x2d\xc7\x55\x50\xfc\xad\x78\x32\x71\xf8\x03\x86\xef\x6a\xbd\xe7\xee\x03\x9d\x79\x34\x7c\x67\xdd\xbf\x31\xbf\x75\xf8\xae\xcf\xef\xfe\x4e\xd3\x9e\xe3\xbb\x99\x5d\xb4\xaf\xf9\xbe\x51\x63\xb7\x26\x7c\x57\xc3\xba\xf1\xbd\x37\xf4\x69\xe7\x7b\x6f\xa8\x59\x37\x9b\x35\xad\x9b\x5d\xe2\xbb\x05\xc4\x85\xf5\x5e\xe3\x26\xe2\xa3\x77\x11\xf8\x00\x71\x12\x03\x9e\x28\x6c\x29\xf1\x36\x3e\x87\xb8\x69\xc4\xbd\x3f\xbe\x5f\xa7\x4f\x7f\x8b\xd6\xd5\x6d\xe0\xba\xd7\xe8\xfb\x42\xf1\x18\xf9\x33\xf8\x32\xd1\x48\x88\xee\xa3\x8a\xb8\x5f\x1f\x3c\x6c\xc9\x53\x92\x9e\x02\xca\x88\x08\xba\x58\x3c\x15\x04\x1f\x24\x20\x60\xe5\xfd\xe1\x7a\xdc\xf7\xb1\xf5\xda\x22\x97\xab\xe3\xbe\xef\x73\xb8\xef\x0b\xe0\x5e\x9e\xdd\x57\x71\x5c\xf3\xea\x27\x7e\xa3\x32\xce\x41\xc7\xbd\x1a\xbf\x27\xcc\x9f\xb3\xbf\xd7\xd5\xc9\x75\x83\x7b\xd8\x42\x0f\xc3\x3d\x27\x2b\xf5\x84\xe6\x9e\x3f\x51\xb8\x83\x75\x37\x06\xfe\xaf\xc1\x9f\x57\x70\x9b\x1b\x97\x11\xae\x6b\x09\xa9\xfe\x5b\xf5\xe2\xf8\xde\x36\x89\xfa\x76\xbb\x2c\xf3\x2f\xe7\xc2\xad\x23\x9a\xfb\x55\xb3\x80\x73\xf8\x3c\xf0\x24\xde\x49\x14\x81\xd7\x27\xf1\x9d\xa7\x48\xcb\xc0\xf5\x9d\xbd\x88\x73\x43\x44\x60\x1f\xb4\xf8\x7a\x02\x60\x45\xfa\x5c\x56\x99\x7f\xbb\xfe\x7e\xa5\x3c\x9e\x11\x6a\x7b\x89\xd2\x54\xdc\x58\xce\x47\x66\xa1\xdd\x81\x5b\xed\x9f\x75\x5f\xcd\xcf\xeb\x56\xff\x3c\xfb\xb5\x5f\xb5\x9b\xec\xb5\xf6\x1f\xc2\xb5\x1b\x41\x8c\x2f\xde\x49\x79\x8f\xff\x3b\x6c\xfc\x6f\xb8\xf0\xcf\x8c\x0f\x7e\x0d\x0a\xdc\xbb\xb3\xfd\xc6\xbb\xfe\x33\x15\xfe\xc7\x13\xcf\x73\x2c\x9e\x17\x94\x78\x4e\x00\xff\x7b\xc5\xb3\xfb\xde\x26\xcb\xd6\x49\x6d\xf1\xfa\xb8\xf1\xc0\xcf\x09\x3f\xae\xf1\xb3\xce\x43\xe6\x3c\xf6\xf3\x58\x86\x9d\x97\xf8\x39\x4f\xfd\x6e\xed\x9d\x2f\xae\x39\xfa\xef\xc8\x17\xd8\x37\xe2\xf8\xfe\x3e\x89\xfd\x7d\x03\x34\xdd\x3b\xcd\xfc\x7f\xf3\x47\x36\xfe\x43\x72\x8c\xff\x41\x19\x0f\xfb\x1d\x01\xde\xad\x1c\x52\xdf\x4d\x58\xef\x1e\xf8\xf9\x2c\xd2\xd0\xed\x7a\x5f\xaa\x7b\xa7\xe1\x3e\x9f\x3d\xcb\xce\x67\x9f\xa2\xf3\xd9\x34\xce\xe1\xd0\x9f\x9e\xc6\x3b\x9b\xe9\x0f\x80\x97\xaa\xef\xff\x1f\xec\x02\x37\x84\xf0\xae\xa0\xda\x7b\xb7\xfc\x34\x70\xec\x34\xde\x59\xd4\x70\x3e\xd4\xe3\x1e\x0b\x4f\x6c\x79\xe2\x09\xdd\x39\x23\x3f\x3d\x8b\x71\x18\x75\xe5\x31\xff\xfb\xe7\x6a\xe7\x43\xe8\x8d\xee\x56\xaf\xd7\xf9\x70\x10\xf9\xf0\x3f\x20\xaf\x8e\xcb\x47\xcb\xfd\x0d\xe3\x3b\x9c\x0b\x9f\x8f\x02\x9f\x7f\xb7\x14\x50\xf2\x03\xde\xc9\x16\x28\x5e\x38\xde\xb0\xbf\xeb\x23\x4f\xe2\xfd\xac\x7d\xce\xc4\x79\x3f\xfa\x1e\xe8\x0a\xa8\x85\x0b\x96\x41\xad\xfb\x72\xeb\xfb\xd1\x1d\xe4\x49\x9c\x83\xa2\x78\xb7\x81\xfc\x94\x3c\x77\x07\xf1\x51\xfd\x1c\xba\xe2\x73\x0e\xd5\xe1\xd4\xf7\x9c\xef\xc5\x18\x4e\xb5\xdf\xa3\xe1\x5e\xb0\x40\xeb\xc5\xce\xef\x7f\xe7\xca\x27\x4b\x5a\xfc\xa1\xe6\x35\xeb\x3d\xef\x24\x68\x24\xf0\x57\x52\xee\xcc\x2f\xe5\x21\x7d\x76\x3f\xbd\xc7\x4d\x14\x56\x95\xf6\xf6\x79\xee\x5d\xa1\x9b\x27\xca\x3b\x86\x78\x76\xff\x9f\x52\x7f\x1d\xf9\x6c\x56\xe6\xb3\x11\x6d\x3e\x33\x6f\x22\x4f\x60\x3f\x09\x8a\xf9\x27\x1c\x6f\xbf\x2f\xcf\x83\x4f\x2e\xde\xac\x73\xdf\x06\xa8\xf5\x7e\xe4\x1e\xe8\x9a\x12\x4f\x4f\x2e\x3e\xef\x7b\xc4\x67\xf5\x73\xdf\xda\x63\x9e\xfb\xd6\x77\xd9\x9e\x9f\x77\x57\x7c\xda\x5b\xeb\x23\xd4\xe0\x3e\xe7\xae\xfa\x9c\xe7\xec\x75\xb2\xe9\xb1\x4e\xfe\xbd\xc6\x75\xb2\x0a\x7c\x40\xf3\x32\x1c\xc0\x3b\x04\xf4\xa7\xfa\x79\xa9\x01\x71\x8c\xf7\x03\x0b\x34\xff\xc3\xf5\xf4\xb0\xaa\x78\x04\x7a\xf0\x4e\xcb\x7a\x27\x46\x59\xc5\x71\x8e\x0a\xb6\x57\xfa\x47\x71\x8a\x77\x28\xb7\x11\x8f\xaf\xd9\xef\x93\x03\x8e\xef\x7c\xc9\x73\x39\x86\x8f\x54\x7c\x93\x28\x58\x71\x78\x0d\xbc\x15\xb7\x6f\x82\xb7\xee\xe1\x66\x14\x3c\x99\x8e\xbe\xc5\xe2\xef\x6d\xd7\x78\x4e\x69\xc7\xf3\x5a\x95\xbc\x43\x07\x58\x77\xde\xa1\x8b\xf1\x44\x61\xc6\x23\xef\x50\x3e\xf5\xce\x3b\x3f\x49\xe3\xed\xc8\x3b\xa3\x3e\x79\xa7\x88\xf7\x37\x76\xde\xa1\x09\x1f\xfc\x04\xc9\x23\x06\x39\x30\xf8\x39\xf0\x75\xcd\xc2\x39\x5e\x6e\xff\x9e\xaa\xe2\x5f\xd8\xe5\x5f\xad\x79\x71\xc8\x07\x67\xd7\x3b\xfe\x88\x7a\x6f\x99\x01\xbc\x17\xae\x41\xd6\x6c\xc5\xa7\x43\xd6\xa6\x91\x95\xdb\x5d\x73\xfc\xbd\xae\x97\x87\x5e\x11\xff\xeb\x78\x83\xaa\xfb\x7d\x4d\xc2\x8d\xa0\xc8\xec\x51\xe5\x4d\x90\x0f\x85\x54\xf9\x42\x80\xe4\xe1\xb0\x2a\xbf\x00\xf9\x54\x9d\x2a\x3f\x00\xf9\x12\xd3\x73\xdf\x20\xf9\x18\xd3\xf3\x37\x90\xcf\x30\x7f\x26\xe1\xcf\x0a\xab\xff\x32\xe4\x6b\x4c\x7e\xd8\x92\x33\x7f\xee\x41\xbf\x68\x50\xe5\xb7\x20\x6f\x66\xf2\xbb\xb2\x7d\x83\xd8\x64\x7a\xf6\x06\x48\x7e\x95\xf5\xeb\x2f\x0d\x92\xf3\xfe\xde\x86\x9e\x2d\x26\xff\x36\xea\xb7\x30\xff\xff\x00\xf2\x36\x26\x0f\x49\x3d\x7b\x45\x6b\xbd\x2a\x3f\x13\x20\xf9\x08\xc3\x95\x75\x90\x8f\x31\xf9\x86\x41\xf2\xb5\xa0\x2a\x7f\x1b\xf5\x87\xd8\x38\xfc\x10\xf5\x7b\xf6\xaa\xf2\xf7\x21\xef\x63\xf2\x6d\xe8\x59\x52\xc5\x22\x0e\x79\x98\xf9\xf3\x7d\xe8\xc9\x30\xf9\xbb\xb2\xbf\xfb\x44\x3f\xeb\xef\x57\x20\x9f\x6d\x54\xe5\xa7\x20\xdf\x62\xf2\x63\x90\xaf\x30\xfd\x12\xfc\x8a\x7d\x62\x8d\xc9\x6f\x40\x3e\xca\xec\xfe\x21\xf4\x2c\x33\xfd\x17\x2d\x39\x9b\xdf\x9f\xb2\xfc\x61\xf2\x37\xa1\x9f\xcf\xfb\xef\xa1\x7e\x0f\xd3\x7f\x16\xf2\xb6\xa7\x54\xf9\x67\x21\x6f\x66\xf2\x83\x90\xb7\x30\xf9\x77\x61\x97\x8f\xf3\xaf\x41\xbe\xce\xe4\x83\x52\x4f\x93\xe8\x67\xf9\xf0\x79\xc8\x47\x98\xfc\xbf\x02\x24\x5f\x63\xe3\xf6\x3f\x06\xc9\xf9\x7a\xf9\x26\xe4\xab\x4c\xfe\x9b\xd0\xd3\xcf\xe2\xf0\xb7\x61\x77\x93\xc9\xe3\x90\x6f\x31\xf9\x15\xe8\xd9\x61\xfd\x1a\x81\x7c\x94\xf9\xff\xba\xdc\x6f\x5b\x04\xff\x3d\x23\xe5\x87\x5c\xf2\x6f\xcb\xfd\xf6\x80\x4b\xde\x2d\xe5\x1f\x75\xc9\x7f\x55\xea\xd9\xe7\x92\x3f\x2f\xe5\x7b\x5d\xf2\x6f\xc9\xfc\x5f\xe7\x92\x9f\x96\xf2\x90\x4b\x1e\x92\xf2\x26\x97\x7c\x51\xca\x83\x2e\x79\x9f\x94\x37\xb8\xe4\x7f\x26\xfd\xff\x09\x97\xbc\x55\xca\xf7\xbb\xe4\x11\xe9\xff\x41\x97\xfc\x5f\x64\xfd\x88\x4b\x3e\x20\xe5\x4f\xbb\xe4\xfd\xa0\xe5\xe9\x7a\x41\x08\xbc\x5a\xb0\xf9\x0c\xe3\x97\x1c\xfc\x2f\x96\xe7\x75\x8f\xcd\x1f\x2f\xe7\xa1\xb0\x5a\xee\xd4\xdf\xcb\xf4\xf7\x32\xfd\x65\x7e\x8e\xe9\x5f\xad\x53\xf9\xb5\x90\x6a\x2f\xec\xb0\xf7\x92\x10\xf8\x5b\x63\x76\xfd\x75\xc6\xb7\x1b\x2a\x1f\xae\x57\xf5\xb5\x33\xfe\x5a\xd0\xe6\x5f\x14\x42\x2c\x07\xd5\xf2\x9e\x06\xd5\xfe\x28\xe3\x77\x1a\x6d\xbe\x0c\xa5\xda\xf6\xfa\xfb\xdb\xc7\xfc\x9b\x65\xfc\x66\x83\xea\xcf\x6c\xa3\xea\xcf\x6a\xa3\xaa\x7f\x7b\xaf\x5a\x3f\xb3\x4f\xf5\x67\x84\x8f\x37\xb3\xd7\x1a\x50\xf9\xc5\x7a\x55\x5f\x2b\xf3\x67\xa5\x41\xd5\x2f\x9e\xcb\xa5\xa6\x72\x22\x9d\x4d\xe5\x32\xd9\x8b\x5f\x48\xc5\xe3\xe3\x17\x52\xb9\x78\x72\x22\x1d\x4f\x24\x93\xa9\x4c\x4e\x3c\x97\x4d\x9d\xaf\x14\x3f\xcf\x4b\x1d\x0d\x73\xc9\x4c\xfc\xca\xd1\x78\xf2\xe2\x85\x0b\xa9\x64\x4e\xa4\xf5\x62\x55\x9d\xae\x50\x5b\xc2\xed\x74\xeb\xed\x74\xfb\xd9\xe9\xf6\xb4\x63\x97\x7c\x29\x91\x99\x28\xcb\x72\xd9\x44\x32\x95\x8d\x4f\xe4\x12\xb9\xcb\x13\x22\x7e\x25\x95\x9d\x18\xbf\x78\x41\x31\x36\x91\xca\xc9\xf2\x14\x57\x67\x17\x38\xab\x27\xcf\x5f\x9c\x70\x55\x25\x61\xfc\xfc\x78\x32\x75\xa1\x5c\x3a\x91\xcb\xe6\x12\x5f\x10\xcf\x4d\x98\x5f\x2a\xd3\x57\x5e\x7c\xb1\x2b\xfe\x42\x99\x74\xc4\x3b\x25\x3d\x1a\xef\x78\x81\xc4\x1d\x90\x5b\x7c\x4f\x99\x74\xc7\x3b\x7b\x50\x1d\x7c\x07\xf8\x0e\xf0\xc7\x50\xed\x18\xb4\x81\x27\xda\x05\xda\x51\xa6\xd6\x50\xc4\x53\x57\x52\x17\x72\xf1\xf1\xcc\x95\xa3\x24\xc3\x58\x4d\x5c\x4c\xa6\x1d\xd2\xdc\xe5\xcc\xf9\x54\x66\xfc\x8b\x24\x92\xca\x8f\x92\x6e\x90\x8e\xa3\x50\x8d\xd2\x23\x65\x72\x84\xc8\xd1\x78\x27\x58\xa2\xdd\x15\xbe\xe3\x08\x5a\x1d\xd1\x38\xd4\xad\x75\xa8\xdb\xed\x50\x37\x29\xeb\x26\xdd\xdd\xe8\x3b\xa4\x1d\x10\x13\xed\xa8\xc8\xbb\xba\xe0\x52\x17\x86\xb4\x0b\xed\x20\xb7\x68\x57\x27\xca\x3b\x51\xde\x89\x72\xf0\x5d\x1d\xa8\x07\xda\xd9\x81\xfa\xe0\x3b\xc0\x13\x3d\x1a\xef\x6a\x47\x7d\xd0\xce\x76\x9a\x9b\x4e\xf0\x1d\xe0\x3b\xf0\x6d\xee\x71\x7e\x5f\xc7\xf7\x0d\xfe\x0b\x7f\x96\x68\x91\x15\x32\xd8\x50\xf9\x77\x33\xd8\xf1\x04\xff\x56\x86\xfb\xc7\x60\x90\xf8\xb0\x4a\xfb\x29\xee\x17\xe3\x1f\x08\xd7\xd1\x45\xfe\x16\x3f\x4d\x14\x9f\x19\x45\x14\xdf\xcf\xac\xf6\x96\xfc\x5f\x3d\xec\x2f\x83\xb6\x36\xf8\xdb\xff\x67\x0f\xfb\xcb\xb0\x3f\xe4\xb0\x1f\xd4\xd8\x7f\xcb\xc3\xfe\x3a\x94\x56\xeb\xff\xd7\x3d\xec\x87\x3f\xa3\xda\x89\x02\x0b\x71\xfb\x97\x3d\xec\x0f\x61\x9f\xea\x09\xfb\xdb\xbf\xe4\x61\xbf\x05\xf6\x47\x1d\xf6\x1b\x34\xf6\x7f\xc9\xd0\xdb\xbf\x06\x48\x35\xb4\xd7\xdf\xfe\x71\x43\x6f\x7f\x0a\xf6\x97\x1c\xf6\xf7\x6a\xec\xe7\x3c\xec\xaf\x7f\x9c\xe8\xec\x3e\x7f\xfb\x19\x0f\xfb\x6d\xbf\x40\xf4\xaa\xc3\xfe\x3e\x8d\xfd\x67\x3c\xc6\x3f\xf3\x29\xa2\x3b\x55\xe2\xef\xa7\xbd\xe2\x1f\xf6\x9d\xe3\xdf\xa4\xb1\x7f\x27\x40\xf6\x79\x0e\x18\xc3\xbd\x20\x47\xec\x7c\xfd\x7e\xcc\xa3\xfd\x97\x6b\x6c\xbf\xe2\xd1\x7e\xa6\xc6\xf6\xcf\x7b\xb4\x5f\xa8\xb1\xfd\x3f\x79\xb4\x5f\xae\xb1\xfd\x71\x8f\xf6\xef\xd7\xd8\xbe\xd9\xd0\xb7\xdf\xac\xb1\xfd\x1b\x1e\xed\x3f\x38\xa2\xaf\xcf\xf3\xf7\x61\x8f\xf6\x3b\x1e\xed\x39\xff\xbb\xb8\xef\x75\xfd\xf0\xf7\x76\x17\x1d\xe7\x8f\x63\x8e\xf8\xb3\x4e\x94\xff\x17\x00\x00\xff\xff\x11\xb0\xd5\x90\x88\x49\x00\x00")

func tcptracerEbpfOBytes() ([]byte, error) {
	return bindataRead(
		_tcptracerEbpfO,
		"tcptracer-ebpf.o",
	)
}

func tcptracerEbpfO() (*asset, error) {
	bytes, err := tcptracerEbpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tcptracer-ebpf.o", size: 18824, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tcptracer-ebpf.o": tcptracerEbpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tcptracer-ebpf.o": &bintree{tcptracerEbpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

